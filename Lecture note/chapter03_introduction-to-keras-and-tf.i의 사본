{"cells":[{"cell_type":"markdown","metadata":{"id":"3dj5zmeb93ao"},"source":["This is a companion notebook for the book [Deep Learning with Python, Second Edition](https://www.manning.com/books/deep-learning-with-python-second-edition?a_aid=keras&a_bid=76564dff). For readability, it only contains runnable code blocks and section titles, and omits everything else in the book: text paragraphs, figures, and pseudocode.\n","\n","**If you want to be able to follow what's going on, I recommend reading the notebook side by side with your copy of the book.**\n","\n","This notebook was generated for TensorFlow 2.6."]},{"cell_type":"markdown","metadata":{"id":"55exdp1R93at"},"source":["# Introduction to Keras and TensorFlow"]},{"cell_type":"markdown","metadata":{"id":"Y58NTz3G93av"},"source":["## What's TensorFlow?"]},{"cell_type":"markdown","metadata":{"id":"Qic5yMPS93av"},"source":["## What's Keras?"]},{"cell_type":"markdown","metadata":{"id":"PSs6Xjh593aw"},"source":["## Keras and TensorFlow: A brief history"]},{"cell_type":"markdown","metadata":{"id":"P2y8NkcJ93ax"},"source":["## Setting up a deep-learning workspace"]},{"cell_type":"markdown","metadata":{"id":"eYIxaCnh93ax"},"source":["### Jupyter notebooks: The preferred way to run deep-learning experiments"]},{"cell_type":"markdown","metadata":{"id":"Yxg30whp93ay"},"source":["### Using Colaboratory"]},{"cell_type":"markdown","metadata":{"id":"IgOiHF5y93az"},"source":["#### First steps with Colaboratory"]},{"cell_type":"markdown","metadata":{"id":"rYfY1gR_93a0"},"source":["#### Installing packages with pip"]},{"cell_type":"markdown","metadata":{"id":"h6TfZ2c_93a1"},"source":["#### Using the GPU runtime"]},{"cell_type":"markdown","metadata":{"id":"tS74OrIw93a1"},"source":["## First steps with TensorFlow"]},{"cell_type":"markdown","metadata":{"id":"OBLD0Glb93a2"},"source":["#### Constant tensors and variables"]},{"cell_type":"markdown","metadata":{"id":"gfxHbZi993a2"},"source":["**All-ones or all-zeros tensors**"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"U7rzY5l793a3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648644818414,"user_tz":-540,"elapsed":12,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"5698199e-962e-4861-faaa-18b088f59f49"},"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[[1.]\n"," [1.]], shape=(2, 1), dtype=float32)\n"]}],"source":["import tensorflow as tf\n","x = tf.ones(shape=(2, 1))\n","print(x)"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"AcdFuBxW93a4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648644770882,"user_tz":-540,"elapsed":859,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"89b07bc6-7d92-409c-f6df-a00f5b87c273"},"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[[0.]\n"," [0.]], shape=(2, 1), dtype=float32)\n"]}],"source":["x = tf.zeros(shape=(2, 1))\n","print(x)"]},{"cell_type":"markdown","metadata":{"id":"5T9_GfPV93a4"},"source":["**Random tensors**"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"r7YmyWMW93a5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648644838793,"user_tz":-540,"elapsed":277,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"63a7f1b6-762b-4f7c-b5da-4b47a12295c5"},"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[[-1.0771623 ]\n"," [-2.8362272 ]\n"," [-0.49383533]], shape=(3, 1), dtype=float32)\n"]}],"source":["x = tf.random.normal(shape=(3, 1), mean=0., stddev=1.)\n","print(x)"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"BjHLgwZO93a5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648644839059,"user_tz":-540,"elapsed":3,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"eaa90260-b1ce-49ac-b159-7122186b534d"},"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[[0.21019161]\n"," [0.08914518]\n"," [0.54158247]], shape=(3, 1), dtype=float32)\n"]}],"source":["x = tf.random.uniform(shape=(3, 1), minval=0., maxval=1.)\n","print(x)"]},{"cell_type":"markdown","metadata":{"id":"WmXPRMzt93a6"},"source":["**NumPy arrays are assignable**"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"9Un4rGYn93a6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648645173131,"user_tz":-540,"elapsed":291,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"41cdc7a9-23ec-4f9a-e8b4-90e2ec6ca8dd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 1.],\n","       [1., 1.]])"]},"metadata":{},"execution_count":8}],"source":["import numpy as np\n","x = np.ones(shape=(2, 2))\n","x[0, 0] = 0.\n","x"]},{"cell_type":"markdown","metadata":{"id":"LlX2DlxH93a6"},"source":["**Creating a TensorFlow variable**"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"s6jkrIWD93a7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648645324873,"user_tz":-540,"elapsed":276,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"d15d4d19-2c88-4570-ce22-04efccb68443"},"outputs":[{"output_type":"stream","name":"stdout","text":["<tf.Variable 'Variable:0' shape=(3, 1) dtype=float32, numpy=\n","array([[ 1.1591966 ],\n","       [ 0.10772021],\n","       [-1.652978  ]], dtype=float32)>\n"]}],"source":["v = tf.Variable(initial_value=tf.random.normal(shape=(3, 1)))\n","print(v)"]},{"cell_type":"markdown","metadata":{"id":"YaNOfWNe93a8"},"source":["**Assigning a value to a TensorFlow variable**"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"9CZLe0Z193a9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648645436296,"user_tz":-540,"elapsed":422,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"7efa05ec-b2b9-487c-a386-d27b4ad87056"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Variable 'UnreadVariable' shape=(3, 1) dtype=float32, numpy=\n","array([[1.],\n","       [1.],\n","       [1.]], dtype=float32)>"]},"metadata":{},"execution_count":10}],"source":["v.assign(tf.ones((3, 1)))"]},{"cell_type":"markdown","metadata":{"id":"OmCvYphi93a9"},"source":["**Assigning a value to a subset of a TensorFlow variable**"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"hf114_ow93a-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648645453246,"user_tz":-540,"elapsed":254,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"5ff12907-5e5b-42c2-fe13-c756ba5f3803"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Variable 'UnreadVariable' shape=(3, 1) dtype=float32, numpy=\n","array([[3.],\n","       [1.],\n","       [1.]], dtype=float32)>"]},"metadata":{},"execution_count":11}],"source":["v[0, 0].assign(3.)"]},{"cell_type":"markdown","metadata":{"id":"5djYimsw93a-"},"source":["**Using `assign_add`**"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"X5CvSEVg93a-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648645459366,"user_tz":-540,"elapsed":360,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"da376901-72b0-45f7-b5b9-d2d7554edc0a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Variable 'UnreadVariable' shape=(3, 1) dtype=float32, numpy=\n","array([[4.],\n","       [2.],\n","       [2.]], dtype=float32)>"]},"metadata":{},"execution_count":12}],"source":["v.assign_add(tf.ones((3, 1)))"]},{"cell_type":"markdown","metadata":{"id":"1crsiUFi93a_"},"source":["#### Tensor operations: Doing math in TensorFlow"]},{"cell_type":"markdown","metadata":{"id":"FEuZ1I6w93a_"},"source":["**A few basic math operations**"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"u8-paPUE93a_","executionInfo":{"status":"ok","timestamp":1648645576974,"user_tz":-540,"elapsed":274,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["a = tf.ones((2, 2))\n","b = tf.square(a)\n","c = tf.sqrt(a)\n","d = b + c\n","e = tf.matmul(a, b)\n","e *= d"]},{"cell_type":"code","source":["e"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NMKrF0c-7lIE","executionInfo":{"status":"ok","timestamp":1648645560875,"user_tz":-540,"elapsed":299,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"a472de38-c1ab-484d-e65d-10e75d1b55ac"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=float32, numpy=\n","array([[4., 4.],\n","       [4., 4.]], dtype=float32)>"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"qxW8aSJx93bA"},"source":["#### A second look at the GradientTape API"]},{"cell_type":"markdown","metadata":{"id":"Si0nhSgo93bA"},"source":["**Using the `GradientTape`**"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"pGwstA6493bA","executionInfo":{"status":"ok","timestamp":1648645833432,"user_tz":-540,"elapsed":384,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["input_var = tf.Variable(initial_value=3.)\n","with tf.GradientTape() as tape:\n","   result = tf.square(input_var)\n","gradient = tape.gradient(result, input_var)"]},{"cell_type":"code","source":["gradient"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hg0Hgm8K8xB5","executionInfo":{"status":"ok","timestamp":1648645842140,"user_tz":-540,"elapsed":386,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"7fd1ff4b-31e1-40a3-dcb7-9d7dbe1ff90e"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=6.0>"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"TJ0yq3mp93bA"},"source":["**Using `GradientTape` with constant tensor inputs**"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"5kGeN5Ya93bB","executionInfo":{"status":"ok","timestamp":1648645849755,"user_tz":-540,"elapsed":448,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["input_const = tf.constant(3.)\n","with tf.GradientTape() as tape:\n","   tape.watch(input_const)\n","   result = tf.square(input_const)\n","gradient = tape.gradient(result, input_const)"]},{"cell_type":"code","source":["gradient"],"metadata":{"id":"lQKVwTnZ80em","executionInfo":{"status":"ok","timestamp":1648645854201,"user_tz":-540,"elapsed":310,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"236332a7-e34f-45ca-b378-59a9a454304e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=6.0>"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"N6iYa1GJ93bB"},"source":["**Using nested gradient tapes to compute second-order gradients**"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"dRaycoWn93bB","executionInfo":{"status":"ok","timestamp":1648645866922,"user_tz":-540,"elapsed":335,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["time = tf.Variable(0.)\n","with tf.GradientTape() as outer_tape:\n","    with tf.GradientTape() as inner_tape:\n","        position =  4.9 * time ** 2\n","    speed = inner_tape.gradient(position, time)\n","acceleration = outer_tape.gradient(speed, time)"]},{"cell_type":"code","source":["acceleration"],"metadata":{"id":"p6pOUkHm85Hq","executionInfo":{"status":"ok","timestamp":1648645874970,"user_tz":-540,"elapsed":14,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"a00972d0-0d0a-42bc-e7aa-364c4db9017c","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=9.8>"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"ogSOh9QH93bC"},"source":["#### An end-to-end example: A linear classifier in pure TensorFlow"]},{"cell_type":"markdown","metadata":{"id":"NJ1wSTA_93bC"},"source":["**Generating two classes of random points in a 2D plane**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HhUVkeLf93bC"},"outputs":[],"source":["num_samples_per_class = 1000\n","negative_samples = np.random.multivariate_normal(\n","    mean=[0, 3],\n","    cov=[[1, 0.5],[0.5, 1]],\n","    size=num_samples_per_class)\n","positive_samples = np.random.multivariate_normal(\n","    mean=[3, 0],\n","    cov=[[1, 0.5],[0.5, 1]],\n","    size=num_samples_per_class)"]},{"cell_type":"markdown","metadata":{"id":"yX9RnAIc93bD"},"source":["**Stacking the two classes into an array with shape (2000, 2)**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fJpvNxub93bD"},"outputs":[],"source":["inputs = np.vstack((negative_samples, positive_samples)).astype(np.float32)"]},{"cell_type":"markdown","metadata":{"id":"5z-1K-A793bD"},"source":["**Generating the corresponding targets (0 and 1)**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gmxnxKUL93bD"},"outputs":[],"source":["targets = np.vstack((np.zeros((num_samples_per_class, 1), dtype=\"float32\"),\n","                     np.ones((num_samples_per_class, 1), dtype=\"float32\")))"]},{"cell_type":"markdown","metadata":{"id":"kH0PyvUS93bE"},"source":["**Plotting the two point classes**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dMvR7_GE93bE"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","plt.scatter(inputs[:, 0], inputs[:, 1], c=targets[:, 0])\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"zGSaaeXY93bE"},"source":["**Creating the linear classifier variables**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jnbuiYPX93bF"},"outputs":[],"source":["input_dim = 2\n","output_dim = 1\n","W = tf.Variable(initial_value=tf.random.uniform(shape=(input_dim, output_dim)))\n","b = tf.Variable(initial_value=tf.zeros(shape=(output_dim,)))"]},{"cell_type":"markdown","metadata":{"id":"NgsEDuD693bF"},"source":["**The forward pass function**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w2dCTwK693bF"},"outputs":[],"source":["def model(inputs):\n","    return tf.matmul(inputs, W) + b"]},{"cell_type":"markdown","metadata":{"id":"LszkfGMS93bG"},"source":["**The mean squared error loss function**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AyWfKEzt93bG"},"outputs":[],"source":["def square_loss(targets, predictions):\n","    per_sample_losses = tf.square(targets - predictions)\n","    return tf.reduce_mean(per_sample_losses)"]},{"cell_type":"markdown","metadata":{"id":"ieqR4yoV93bH"},"source":["**The training step function**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cAga5rNY93bH"},"outputs":[],"source":["learning_rate = 0.1\n","\n","def training_step(inputs, targets):\n","    with tf.GradientTape() as tape:\n","        predictions = model(inputs)\n","        loss = square_loss(targets, predictions)\n","    grad_loss_wrt_W, grad_loss_wrt_b = tape.gradient(loss, [W, b])\n","    W.assign_sub(grad_loss_wrt_W * learning_rate)\n","    b.assign_sub(grad_loss_wrt_b * learning_rate)\n","    return loss"]},{"cell_type":"markdown","metadata":{"id":"i1B3mUj_93bI"},"source":["**The batch training loop**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NiXqQfM193bI"},"outputs":[],"source":["for step in range(40):\n","    loss = training_step(inputs, targets)\n","    print(f\"Loss at step {step}: {loss:.4f}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AUjcQTbG93bI"},"outputs":[],"source":["predictions = model(inputs)\n","plt.scatter(inputs[:, 0], inputs[:, 1], c=predictions[:, 0] > 0.5)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6eemhg8r93bJ"},"outputs":[],"source":["x = np.linspace(-1, 4, 100)\n","y = - W[0] /  W[1] * x + (0.5 - b) / W[1]\n","plt.plot(x, y, \"-r\")\n","plt.scatter(inputs[:, 0], inputs[:, 1], c=predictions[:, 0] > 0.5)"]},{"cell_type":"markdown","metadata":{"id":"S26KL6U893bJ"},"source":["## Anatomy of a neural network: Understanding core Keras APIs"]},{"cell_type":"markdown","metadata":{"id":"G2y_As7x93bJ"},"source":["### Layers: The building blocks of deep learning"]},{"cell_type":"markdown","metadata":{"id":"jaGQBxER93bK"},"source":["#### The base Layer class in Keras"]},{"cell_type":"markdown","metadata":{"id":"hnDgoChY93bK"},"source":["**A `Dense` layer implemented as a `Layer` subclass**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h9k7ud7x93bK"},"outputs":[],"source":["from tensorflow import keras\n","\n","class SimpleDense(keras.layers.Layer):\n","\n","    def __init__(self, units, activation=None):\n","        super().__init__()\n","        self.units = units\n","        self.activation = activation\n","\n","    def build(self, input_shape):\n","        input_dim = input_shape[-1]\n","        self.W = self.add_weight(shape=(input_dim, self.units),\n","                                 initializer=\"random_normal\")\n","        self.b = self.add_weight(shape=(self.units,),\n","                                 initializer=\"zeros\")\n","\n","    def call(self, inputs):\n","        y = tf.matmul(inputs, self.W) + self.b\n","        if self.activation is not None:\n","            y = self.activation(y)\n","        return y"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HA-j304H93bK"},"outputs":[],"source":["my_dense = SimpleDense(units=32, activation=tf.nn.relu)\n","input_tensor = tf.ones(shape=(2, 784))\n","output_tensor = my_dense(input_tensor)\n","print(output_tensor.shape)"]},{"cell_type":"markdown","metadata":{"id":"xJIu7VBY93bL"},"source":["#### Automatic shape inference: Building layers on the fly"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UkXQPLPk93bL"},"outputs":[],"source":["from tensorflow.keras import layers\n","layer = layers.Dense(32, activation=\"relu\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sVM08mp293bL"},"outputs":[],"source":["from tensorflow.keras import models\n","from tensorflow.keras import layers\n","model = models.Sequential([\n","    layers.Dense(32, activation=\"relu\"),\n","    layers.Dense(32)\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AqiXLne093bM"},"outputs":[],"source":["model = keras.Sequential([\n","    SimpleDense(32, activation=\"relu\"),\n","    SimpleDense(64, activation=\"relu\"),\n","    SimpleDense(32, activation=\"relu\"),\n","    SimpleDense(10, activation=\"softmax\")\n","])"]},{"cell_type":"markdown","metadata":{"id":"3DPC65tg93bR"},"source":["### From layers to models"]},{"cell_type":"markdown","metadata":{"id":"6A2J2NXQ93bR"},"source":["### The \"compile\" step: Configuring the learning process"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pc4Mp_993bS"},"outputs":[],"source":["model = keras.Sequential([keras.layers.Dense(1)])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"mean_squared_error\",\n","              metrics=[\"accuracy\"])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"O1X5tE1C93bS"},"outputs":[],"source":["model.compile(optimizer=keras.optimizers.RMSprop(),\n","              loss=keras.losses.MeanSquaredError(),\n","              metrics=[keras.metrics.BinaryAccuracy()])"]},{"cell_type":"markdown","metadata":{"id":"5RABCyWP93bS"},"source":["### Picking a loss function"]},{"cell_type":"markdown","metadata":{"id":"A-aLY4kY93bS"},"source":["### Understanding the fit() method"]},{"cell_type":"markdown","metadata":{"id":"4Y9TBfdM93bT"},"source":["**Calling `fit()` with NumPy data**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wzSx0fsm93bT"},"outputs":[],"source":["history = model.fit(\n","    inputs,\n","    targets,\n","    epochs=5,\n","    batch_size=128\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N_HEwR_R93bT"},"outputs":[],"source":["history.history"]},{"cell_type":"markdown","metadata":{"id":"XiDwC65n93bT"},"source":["### Monitoring loss and metrics on validation data"]},{"cell_type":"markdown","metadata":{"id":"6xmWaJ2P93bT"},"source":["**Using the `validation_data` argument**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7IPS6fzA93bU"},"outputs":[],"source":["model = keras.Sequential([keras.layers.Dense(1)])\n","model.compile(optimizer=keras.optimizers.RMSprop(learning_rate=0.1),\n","              loss=keras.losses.MeanSquaredError(),\n","              metrics=[keras.metrics.BinaryAccuracy()])\n","\n","indices_permutation = np.random.permutation(len(inputs))\n","shuffled_inputs = inputs[indices_permutation]\n","shuffled_targets = targets[indices_permutation]\n","\n","num_validation_samples = int(0.3 * len(inputs))\n","val_inputs = shuffled_inputs[:num_validation_samples]\n","val_targets = shuffled_targets[:num_validation_samples]\n","training_inputs = shuffled_inputs[num_validation_samples:]\n","training_targets = shuffled_targets[num_validation_samples:]\n","model.fit(\n","    training_inputs,\n","    training_targets,\n","    epochs=5,\n","    batch_size=16,\n","    validation_data=(val_inputs, val_targets)\n",")"]},{"cell_type":"markdown","metadata":{"id":"dPWaLHI_93bU"},"source":["### Inference: Using a model after training"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"F3_asbS_93bU"},"outputs":[],"source":["predictions = model.predict(val_inputs, batch_size=128)\n","print(predictions[:10])"]},{"cell_type":"markdown","metadata":{"id":"t5D_H5HH93bU"},"source":["## Summary"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"chapter03_introduction-to-keras-and-tf.i의 사본","provenance":[{"file_id":"https://github.com/fchollet/deep-learning-with-python-notebooks/blob/master/chapter03_introduction-to-keras-and-tf.ipynb","timestamp":1648562245049}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"}},"nbformat":4,"nbformat_minor":0}