{"cells":[{"cell_type":"markdown","metadata":{"id":"-hAhPLTr9tMD"},"source":["This is a companion notebook for the book [Deep Learning with Python, Second Edition](https://www.manning.com/books/deep-learning-with-python-second-edition?a_aid=keras&a_bid=76564dff). For readability, it only contains runnable code blocks and section titles, and omits everything else in the book: text paragraphs, figures, and pseudocode.\n","\n","**If you want to be able to follow what's going on, I recommend reading the notebook side by side with your copy of the book.**\n","\n","This notebook was generated for TensorFlow 2.6."]},{"cell_type":"markdown","metadata":{"id":"jRjHbxta9tMK"},"source":["# Getting started with neural networks: Classification and regression"]},{"cell_type":"markdown","metadata":{"id":"YCm-xmF69tML"},"source":["## Classifying movie reviews: A binary classification example 이진분류"]},{"cell_type":"markdown","metadata":{"id":"YSL1usY29tMM"},"source":["### The IMDB dataset"]},{"cell_type":"markdown","metadata":{"id":"EMkjhOtX9tMN"},"source":["**Loading the IMDB dataset**"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"4C0KJsJR9tMO","executionInfo":{"status":"ok","timestamp":1649580815799,"user_tz":-540,"elapsed":5896,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["from tensorflow.keras.datasets import imdb\n","(train_data, train_labels), (test_data, test_labels) = imdb.load_data(\n","    num_words=10000)"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"5nAzZcvO9tMR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649580815800,"user_tz":-540,"elapsed":116,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"f51c6c44-4bec-4928-de49-65247cb72aca"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1,\n"," 14,\n"," 22,\n"," 16,\n"," 43,\n"," 530,\n"," 973,\n"," 1622,\n"," 1385,\n"," 65,\n"," 458,\n"," 4468,\n"," 66,\n"," 3941,\n"," 4,\n"," 173,\n"," 36,\n"," 256,\n"," 5,\n"," 25,\n"," 100,\n"," 43,\n"," 838,\n"," 112,\n"," 50,\n"," 670,\n"," 2,\n"," 9,\n"," 35,\n"," 480,\n"," 284,\n"," 5,\n"," 150,\n"," 4,\n"," 172,\n"," 112,\n"," 167,\n"," 2,\n"," 336,\n"," 385,\n"," 39,\n"," 4,\n"," 172,\n"," 4536,\n"," 1111,\n"," 17,\n"," 546,\n"," 38,\n"," 13,\n"," 447,\n"," 4,\n"," 192,\n"," 50,\n"," 16,\n"," 6,\n"," 147,\n"," 2025,\n"," 19,\n"," 14,\n"," 22,\n"," 4,\n"," 1920,\n"," 4613,\n"," 469,\n"," 4,\n"," 22,\n"," 71,\n"," 87,\n"," 12,\n"," 16,\n"," 43,\n"," 530,\n"," 38,\n"," 76,\n"," 15,\n"," 13,\n"," 1247,\n"," 4,\n"," 22,\n"," 17,\n"," 515,\n"," 17,\n"," 12,\n"," 16,\n"," 626,\n"," 18,\n"," 2,\n"," 5,\n"," 62,\n"," 386,\n"," 12,\n"," 8,\n"," 316,\n"," 8,\n"," 106,\n"," 5,\n"," 4,\n"," 2223,\n"," 5244,\n"," 16,\n"," 480,\n"," 66,\n"," 3785,\n"," 33,\n"," 4,\n"," 130,\n"," 12,\n"," 16,\n"," 38,\n"," 619,\n"," 5,\n"," 25,\n"," 124,\n"," 51,\n"," 36,\n"," 135,\n"," 48,\n"," 25,\n"," 1415,\n"," 33,\n"," 6,\n"," 22,\n"," 12,\n"," 215,\n"," 28,\n"," 77,\n"," 52,\n"," 5,\n"," 14,\n"," 407,\n"," 16,\n"," 82,\n"," 2,\n"," 8,\n"," 4,\n"," 107,\n"," 117,\n"," 5952,\n"," 15,\n"," 256,\n"," 4,\n"," 2,\n"," 7,\n"," 3766,\n"," 5,\n"," 723,\n"," 36,\n"," 71,\n"," 43,\n"," 530,\n"," 476,\n"," 26,\n"," 400,\n"," 317,\n"," 46,\n"," 7,\n"," 4,\n"," 2,\n"," 1029,\n"," 13,\n"," 104,\n"," 88,\n"," 4,\n"," 381,\n"," 15,\n"," 297,\n"," 98,\n"," 32,\n"," 2071,\n"," 56,\n"," 26,\n"," 141,\n"," 6,\n"," 194,\n"," 7486,\n"," 18,\n"," 4,\n"," 226,\n"," 22,\n"," 21,\n"," 134,\n"," 476,\n"," 26,\n"," 480,\n"," 5,\n"," 144,\n"," 30,\n"," 5535,\n"," 18,\n"," 51,\n"," 36,\n"," 28,\n"," 224,\n"," 92,\n"," 25,\n"," 104,\n"," 4,\n"," 226,\n"," 65,\n"," 16,\n"," 38,\n"," 1334,\n"," 88,\n"," 12,\n"," 16,\n"," 283,\n"," 5,\n"," 16,\n"," 4472,\n"," 113,\n"," 103,\n"," 32,\n"," 15,\n"," 16,\n"," 5345,\n"," 19,\n"," 178,\n"," 32]"]},"metadata":{},"execution_count":4}],"source":["train_data[0]"]},{"cell_type":"code","source":["len(train_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mnaKMqwBCRx2","executionInfo":{"status":"ok","timestamp":1649580815802,"user_tz":-540,"elapsed":69,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"a399ad8d-83ed-4749-ce76-f86121f50f92"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["25000"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","execution_count":6,"metadata":{"id":"RStL14mW9tMT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649580815804,"user_tz":-540,"elapsed":49,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"d1500a2e-9601-42ca-cf72-2ea08e83abb9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":6}],"source":["train_labels[0] #부정0 긍정1"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"NMeRlIdP9tMU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649580815805,"user_tz":-540,"elapsed":38,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"a673e60a-55f1-4eda-b55d-adc227600ded"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["9999"]},"metadata":{},"execution_count":7}],"source":["max([max(sequence) for sequence in train_data]) #자주 등장하는 단어 1만개 제한"]},{"cell_type":"markdown","metadata":{"id":"vGh0oj-n9tMV"},"source":["**Decoding reviews back to text**"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"ZPv6s2x39tMW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649580824610,"user_tz":-540,"elapsed":635,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"f7373f35-6046-4468-991b-3d4947195d85"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb_word_index.json\n","1646592/1641221 [==============================] - 0s 0us/step\n","1654784/1641221 [==============================] - 0s 0us/step\n"]}],"source":["word_index = imdb.get_word_index() # word_index는 단어와 정수 인덱스를 매핑한 딕셔너리\n","reverse_word_index = dict(\n","    [(value, key) for (key, value) in word_index.items()]) # 정수 인덱스와 단어를 매핑하도록 뒤집기\n","decoded_review = \" \".join( #스페이스바로 조인\n","    [reverse_word_index.get(i - 3, \"?\") for i in train_data[0]]) # 리뷰 디코딩: 0,1,2는 '패딩' '문서시작' '사전에 없음' 을 위한 인덱스이므로 3을 뺌"]},{"cell_type":"code","source":["reverse_word_index.get(104 - 3, \"?\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"uGlS7vDpDpz9","executionInfo":{"status":"ok","timestamp":1649580838678,"user_tz":-540,"elapsed":870,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"8b2ec644-4cf9-41c3-a8ba-96ac046ec7c4"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'think'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["decoded_review #1:positive review"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":126},"id":"L_86hHR5CqBX","executionInfo":{"status":"ok","timestamp":1649580842470,"user_tz":-540,"elapsed":474,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"9df88b6f-3129-4c68-bc1f-8186714a5251"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"? this film was just brilliant casting location scenery story direction everyone's really suited the part they played and you could just imagine being there robert ? is an amazing actor and now the same being director ? father came from the same scottish island as myself so i loved the fact there was a real connection with this film the witty remarks throughout the film were great it was just brilliant so much that i bought the film as soon as it was released for ? and would recommend it to everyone to watch and the fly fishing was amazing really cried at the end it was so sad and you know what they say if you cry at a film it must have been good and this definitely was also ? to the two little boy's that played the ? of norman and paul they were just brilliant children are often left out of the ? list i think because the stars that play them all grown up are such a big profile for the whole film but these children are amazing and should be praised for what they have done don't you think the whole story was so lovely because it was true and was someone's life after all that was shared with us all\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"_8tX6tET9tMX"},"source":["### Preparing the data"]},{"cell_type":"markdown","metadata":{"id":"5J-6SkVz9tMX"},"source":["**Encoding the integer sequences via multi-hot encoding**"]},{"cell_type":"code","source":["train_data[0][:6]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7F9ynHzbJQyC","executionInfo":{"status":"ok","timestamp":1648565237433,"user_tz":-540,"elapsed":5,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"2ce1ab80-5785-4ff8-afc5-1e12840b819e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 14, 22, 16, 43, 530]"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["train_data[0][1] #[i][j]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7KaFUzrjJIAW","executionInfo":{"status":"ok","timestamp":1648565221579,"user_tz":-540,"elapsed":7,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"131d22f1-dada-4d11-fe50-661b06873a15"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["14"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["원-핫 벡터 만들기: 정수 시퀀스를 이진 행렬로 인코딩하기"],"metadata":{"id":"bmq-zqFQs3OR"}},{"cell_type":"code","execution_count":12,"metadata":{"id":"yWm62m_89tMY","executionInfo":{"status":"ok","timestamp":1649581255901,"user_tz":-540,"elapsed":4297,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["import numpy as np\n","def vectorize_sequences(sequences, dimension=10000):\n","    results = np.zeros((len(sequences), dimension)) # 크기가 (len(sequences), dimension)이고 모든 원소가 0인 행렬\n","    for i, sequence in enumerate(sequences):\n","        for j in sequence:\n","            results[i, j] = 1. # result[i]에서 특정 인덱스의 위치를 1로 만듦\n","    return results\n","x_train = vectorize_sequences(train_data) # 훈련 데이터를 벡터로 변환\n","x_test = vectorize_sequences(test_data)  # 테스트 데이터를 벡터로 변환"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"VEGeUG5b9tMZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649581259421,"user_tz":-540,"elapsed":569,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"6a3caae5-9835-429f-acd9-a295d6709ed0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0., 1., 1., ..., 0., 0., 0.])"]},"metadata":{},"execution_count":13}],"source":["x_train[0]"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"J3VrFcn_9tMa","executionInfo":{"status":"ok","timestamp":1649581259910,"user_tz":-540,"elapsed":6,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["y_train = np.asarray(train_labels).astype(\"float32\") # 레이블 벡터로 바꿈\n","y_test = np.asarray(test_labels).astype(\"float32\")"]},{"cell_type":"markdown","metadata":{"id":"BwXhIC2W9tMb"},"source":["### Building your model"]},{"cell_type":"markdown","metadata":{"id":"-FHYerhR9tMb"},"source":["**Model definition**"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"Js8-lXFm9tMc","executionInfo":{"status":"ok","timestamp":1649582008552,"user_tz":-540,"elapsed":3087,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","model = keras.Sequential([\n","    layers.Dense(16, activation=\"relu\"), # 16은 은닉 유닛 갯수\n","    layers.Dense(16, activation=\"relu\"),\n","    layers.Dense(1, activation=\"sigmoid\")\n","])"]},{"cell_type":"markdown","source":["* relu는 음수를 0으로 만드는 함수\n","* sigmoid는 임의의 값을 [0,1]사이로 압축하므로 출력 값을 확률처럼 해석"],"metadata":{"id":"-BRNhFNPuCGg"}},{"cell_type":"markdown","metadata":{"id":"2PACCeRB9tMd"},"source":["**Compiling the model**"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"3DDchPWH9tMe","executionInfo":{"status":"ok","timestamp":1649582014385,"user_tz":-540,"elapsed":923,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["model.compile(optimizer=\"rmsprop\",\n","              loss=\"binary_crossentropy\", # 이진분류, 신경말 출력이 확률이기 때문/ mean_squared_error 도 사용가능\n","              metrics=[\"accuracy\"])"]},{"cell_type":"markdown","metadata":{"id":"TG-9MPB19tMe"},"source":["### Validating your approach"]},{"cell_type":"markdown","metadata":{"id":"JzRq3LY59tMf"},"source":["**Setting aside a validation set**"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"5vRMUWOz9tMg","executionInfo":{"status":"ok","timestamp":1649582130242,"user_tz":-540,"elapsed":9,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["x_val = x_train[:10000]\n","partial_x_train = x_train[10000:]\n","y_val = y_train[:10000]\n","partial_y_train = y_train[10000:]"]},{"cell_type":"markdown","metadata":{"id":"t5mPVvKQ9tMi"},"source":["**Training your model**"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"VwqOAzuf9tMi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649582154825,"user_tz":-540,"elapsed":22474,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"1ae67b22-e44e-403e-c6a5-2910f782f710"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","30/30 [==============================] - 5s 44ms/step - loss: 0.5305 - accuracy: 0.7951 - val_loss: 0.4267 - val_accuracy: 0.8366\n","Epoch 2/20\n","30/30 [==============================] - 1s 18ms/step - loss: 0.3320 - accuracy: 0.9004 - val_loss: 0.3216 - val_accuracy: 0.8841\n","Epoch 3/20\n","30/30 [==============================] - 1s 18ms/step - loss: 0.2435 - accuracy: 0.9227 - val_loss: 0.2872 - val_accuracy: 0.8913\n","Epoch 4/20\n","30/30 [==============================] - 1s 18ms/step - loss: 0.1890 - accuracy: 0.9400 - val_loss: 0.2755 - val_accuracy: 0.8922\n","Epoch 5/20\n","30/30 [==============================] - 1s 19ms/step - loss: 0.1472 - accuracy: 0.9545 - val_loss: 0.2861 - val_accuracy: 0.8877\n","Epoch 6/20\n","30/30 [==============================] - 1s 19ms/step - loss: 0.1224 - accuracy: 0.9619 - val_loss: 0.3119 - val_accuracy: 0.8787\n","Epoch 7/20\n","30/30 [==============================] - 1s 19ms/step - loss: 0.0979 - accuracy: 0.9711 - val_loss: 0.3107 - val_accuracy: 0.8812\n","Epoch 8/20\n","30/30 [==============================] - 1s 19ms/step - loss: 0.0793 - accuracy: 0.9778 - val_loss: 0.3324 - val_accuracy: 0.8819\n","Epoch 9/20\n","30/30 [==============================] - 1s 18ms/step - loss: 0.0677 - accuracy: 0.9819 - val_loss: 0.3549 - val_accuracy: 0.8772\n","Epoch 10/20\n","30/30 [==============================] - 1s 18ms/step - loss: 0.0509 - accuracy: 0.9888 - val_loss: 0.3846 - val_accuracy: 0.8738\n","Epoch 11/20\n","30/30 [==============================] - 1s 18ms/step - loss: 0.0425 - accuracy: 0.9907 - val_loss: 0.4211 - val_accuracy: 0.8687\n","Epoch 12/20\n","30/30 [==============================] - 1s 18ms/step - loss: 0.0342 - accuracy: 0.9931 - val_loss: 0.4374 - val_accuracy: 0.8735\n","Epoch 13/20\n","30/30 [==============================] - 1s 19ms/step - loss: 0.0262 - accuracy: 0.9951 - val_loss: 0.5080 - val_accuracy: 0.8606\n","Epoch 14/20\n","30/30 [==============================] - 1s 18ms/step - loss: 0.0184 - accuracy: 0.9979 - val_loss: 0.5093 - val_accuracy: 0.8720\n","Epoch 15/20\n","30/30 [==============================] - 1s 19ms/step - loss: 0.0154 - accuracy: 0.9978 - val_loss: 0.5371 - val_accuracy: 0.8679\n","Epoch 16/20\n","30/30 [==============================] - 1s 18ms/step - loss: 0.0131 - accuracy: 0.9985 - val_loss: 0.5730 - val_accuracy: 0.8687\n","Epoch 17/20\n","30/30 [==============================] - 1s 18ms/step - loss: 0.0079 - accuracy: 0.9992 - val_loss: 0.6574 - val_accuracy: 0.8530\n","Epoch 18/20\n","30/30 [==============================] - 1s 19ms/step - loss: 0.0059 - accuracy: 0.9997 - val_loss: 0.7397 - val_accuracy: 0.8628\n","Epoch 19/20\n","30/30 [==============================] - 1s 18ms/step - loss: 0.0047 - accuracy: 0.9995 - val_loss: 0.7619 - val_accuracy: 0.8653\n","Epoch 20/20\n","30/30 [==============================] - 1s 18ms/step - loss: 0.0036 - accuracy: 0.9997 - val_loss: 0.7180 - val_accuracy: 0.8638\n"]}],"source":["history = model.fit(partial_x_train,\n","                    partial_y_train,\n","                    epochs=20, # x_train, y_train 텐서에 있는 모든 셈플에 대해 20번 반복\n","                    batch_size=512, # 512개의 샘플씩 미니 배치 만들기\n","                    validation_data=(x_val, y_val))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qnKZVuh09tMj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648566768683,"user_tz":-540,"elapsed":120,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"e3254dfa-4517-43d8-c376-322d404d514f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])"]},"metadata":{},"execution_count":27}],"source":["history_dict = history.history\n","history_dict.keys()"]},{"cell_type":"markdown","metadata":{"id":"En0T_YV79tMj"},"source":["**Plotting the training and validation loss**"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"n0ccA9kh9tMk","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1649582176260,"user_tz":-540,"elapsed":591,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"e8b6e1ae-5e11-4fc3-94fa-8dd03b986159"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# 훈련과 검증 손실 그리기\n","import matplotlib.pyplot as plt\n","history_dict = history.history\n","loss_values = history_dict[\"loss\"]\n","val_loss_values = history_dict[\"val_loss\"]\n","epochs = range(1, len(loss_values) + 1)\n","plt.plot(epochs, loss_values, \"bo\", label=\"Training loss\")\n","plt.plot(epochs, val_loss_values, \"b\", label=\"Validation loss\")\n","plt.title(\"Training and validation loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Vvr6gFOq9tMk"},"source":["**Plotting the training and validation accuracy**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"72bVTAn39tMk","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1648566769295,"user_tz":-540,"elapsed":14,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"b0ef8746-82cf-4248-fe60-3c474062ee0e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# 훈련과 검증 정확도 그리기\n","plt.clf()\n","acc = history_dict[\"accuracy\"]\n","val_acc = history_dict[\"val_accuracy\"]\n","plt.plot(epochs, acc, \"bo\", label=\"Training acc\")\n","plt.plot(epochs, val_acc, \"b\", label=\"Validation acc\")\n","plt.title(\"Training and validation accuracy\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Q4glowRc9tMl"},"source":["**Retraining a model from scratch**"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"Lm0tB-IS9tMl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649582628456,"user_tz":-540,"elapsed":8475,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"7a5759e3-7ff7-4f7e-a7e8-23a4fae0223b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/4\n","49/49 [==============================] - 1s 12ms/step - loss: 0.4721 - accuracy: 0.8164\n","Epoch 2/4\n","49/49 [==============================] - 1s 11ms/step - loss: 0.2693 - accuracy: 0.9063\n","Epoch 3/4\n","49/49 [==============================] - 1s 11ms/step - loss: 0.2048 - accuracy: 0.9282\n","Epoch 4/4\n","49/49 [==============================] - 1s 12ms/step - loss: 0.1707 - accuracy: 0.9394\n","782/782 [==============================] - 2s 2ms/step - loss: 0.2921 - accuracy: 0.8834\n"]}],"source":["model = keras.Sequential([\n","    layers.Dense(16, activation=\"relu\"),\n","    layers.Dense(16, activation=\"relu\"),\n","    layers.Dense(1, activation=\"sigmoid\")\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"binary_crossentropy\",\n","              metrics=[\"accuracy\"])\n","model.fit(x_train, y_train, epochs=4, batch_size=512) # 과대적합 방지위해 4번째 에포크 동안만 훈련\n","results = model.evaluate(x_test, y_test)"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"hWwItqXB9tMm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649582631546,"user_tz":-540,"elapsed":609,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"6bafaed4-a70f-4be0-a599-70229f02b497"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.2920835614204407, 0.8834400177001953]"]},"metadata":{},"execution_count":23}],"source":["results # 최종 결과"]},{"cell_type":"markdown","metadata":{"id":"DW6gMuYx9tMm"},"source":["### Using a trained model to generate predictions on new data"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"Q4vkjNzV9tMs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649582678870,"user_tz":-540,"elapsed":3900,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"63212e52-b4b9-4f12-d283-482f3a5a01da"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.20135726],\n","       [0.9999056 ],\n","       [0.9416848 ],\n","       ...,\n","       [0.20739843],\n","       [0.12633103],\n","       [0.6382805 ]], dtype=float32)"]},"metadata":{},"execution_count":24}],"source":["model.predict(x_test) # 어떤 리뷰가 긍정인 확률"]},{"cell_type":"markdown","metadata":{"id":"PJ76tX8E9tMt"},"source":["### Further experiments"]},{"cell_type":"markdown","metadata":{"id":"Tgotb5Lh9tMu"},"source":["### Wrapping up"]},{"cell_type":"markdown","metadata":{"id":"jx4-I7D49tMu"},"source":["## Classifying newswires: A multiclass classification example 다중분류"]},{"cell_type":"markdown","metadata":{"id":"jlouvZWe9tMv"},"source":["### The Reuters dataset"]},{"cell_type":"markdown","metadata":{"id":"ERuSO0Pw9tMv"},"source":["**Loading the Reuters dataset**"]},{"cell_type":"markdown","source":["46개의 토픽"],"metadata":{"id":"j9YYkS8_zOCv"}},{"cell_type":"code","execution_count":25,"metadata":{"id":"qH3THORP9tMw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649582701871,"user_tz":-540,"elapsed":2134,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"b52c73d7-3b6e-4926-ff04-eddbe0dbf2b2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/reuters.npz\n","2113536/2110848 [==============================] - 0s 0us/step\n","2121728/2110848 [==============================] - 0s 0us/step\n"]}],"source":["from tensorflow.keras.datasets import reuters\n","(train_data, train_labels), (test_data, test_labels) = reuters.load_data(\n","    num_words=10000)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tDs9ZTw39tMw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648566797626,"user_tz":-540,"elapsed":8,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"80ffc1d4-defc-438f-d6fe-c5c419b93eed"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["8982"]},"metadata":{},"execution_count":31}],"source":["len(train_data) # 8982 개의 훈련샘플"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"m5i-laSY9tMx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648566798025,"user_tz":-540,"elapsed":3,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"e4fa3e67-81ae-4ada-9048-2911d294b687"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["2246"]},"metadata":{},"execution_count":32}],"source":["len(test_data)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WzgVHv1x9tMy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648566798483,"user_tz":-540,"elapsed":10,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"2c50768b-f981-48c3-c3a7-88b1dba957b3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1,\n"," 245,\n"," 273,\n"," 207,\n"," 156,\n"," 53,\n"," 74,\n"," 160,\n"," 26,\n"," 14,\n"," 46,\n"," 296,\n"," 26,\n"," 39,\n"," 74,\n"," 2979,\n"," 3554,\n"," 14,\n"," 46,\n"," 4689,\n"," 4329,\n"," 86,\n"," 61,\n"," 3499,\n"," 4795,\n"," 14,\n"," 61,\n"," 451,\n"," 4329,\n"," 17,\n"," 12]"]},"metadata":{},"execution_count":33}],"source":["train_data[10] # 각 샘플은 정수 리스트 (단어 인덱스)"]},{"cell_type":"markdown","metadata":{"id":"gEVLcUuw9tMz"},"source":["**Decoding newswires back to text**"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"MwJfglJk9tMz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649582970118,"user_tz":-540,"elapsed":1253,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"ff479259-fd5c-401c-b23e-45093ce6e2cc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/reuters_word_index.json\n","557056/550378 [==============================] - 0s 0us/step\n","565248/550378 [==============================] - 0s 0us/step\n"]}],"source":["# 로이터 데이터셋을 텍스트로 디코딩\n","word_index = reuters.get_word_index()\n","reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n","decoded_newswire = \" \".join([reverse_word_index.get(i - 3, \"?\") for i in\n","    train_data[0]])"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"fVFTYnhU9tM0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649582972863,"user_tz":-540,"elapsed":11,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"571e8512-6968-4637-c091-3187ffa07b6c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":27}],"source":["train_labels[10] # 레이블은 토픽의 인덱스로 0과 45 사이의 정수"]},{"cell_type":"markdown","metadata":{"id":"0s3UBMxo9tM1"},"source":["### Preparing the data"]},{"cell_type":"markdown","metadata":{"id":"byZ6kgIf9tM1"},"source":["**Encoding the input data**"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"nTgAi-wG9tM1","executionInfo":{"status":"ok","timestamp":1649583095744,"user_tz":-540,"elapsed":746,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["x_train = vectorize_sequences(train_data) # 훈련 데이터 벡터 변환\n","x_test = vectorize_sequences(test_data)"]},{"cell_type":"markdown","metadata":{"id":"l_BJBW1b9tM2"},"source":["**Encoding the labels**"]},{"cell_type":"code","source":["train_labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qMfUsqSsQRyf","executionInfo":{"status":"ok","timestamp":1649583097978,"user_tz":-540,"elapsed":11,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"9861aaf4-cb6a-4174-c320-30263f8b8ca6"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 3,  4,  3, ..., 25,  3, 25])"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","execution_count":31,"metadata":{"id":"owRe00ca9tM2","executionInfo":{"status":"ok","timestamp":1649583098516,"user_tz":-540,"elapsed":6,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["def to_one_hot(labels, dimension=46):\n","    results = np.zeros((len(labels), dimension))\n","    for i, label in enumerate(labels):\n","        results[i, label] = 1.\n","    return results\n","y_train = to_one_hot(train_labels) # 훈련 레이블 벡터 변환\n","y_test = to_one_hot(test_labels)"]},{"cell_type":"code","source":["y_train[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yDphC49EQW6b","executionInfo":{"status":"ok","timestamp":1649583098985,"user_tz":-540,"elapsed":17,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"7c1c8ac2-c927-478f-c07a-1c5b21fa9049"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","execution_count":33,"metadata":{"id":"tI9yTMQx9tM2","executionInfo":{"status":"ok","timestamp":1649583098987,"user_tz":-540,"elapsed":15,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["from tensorflow.keras.utils import to_categorical # 위에 꺼랑 같음\n","y_train = to_categorical(train_labels)\n","y_test = to_categorical(test_labels)"]},{"cell_type":"markdown","metadata":{"id":"tY3BRLy_9tM3"},"source":["### Building your model"]},{"cell_type":"markdown","metadata":{"id":"ylKtrqhN9tM3"},"source":["**Model definition**"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"taQkwIOY9tM3","executionInfo":{"status":"ok","timestamp":1649583822962,"user_tz":-540,"elapsed":465,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["model = keras.Sequential([\n","    layers.Dense(64, activation=\"relu\"),\n","    layers.Dense(64, activation=\"relu\"),\n","    layers.Dense(46, activation=\"softmax\") # 출력 클래스 개수 46개\n","])"]},{"cell_type":"markdown","metadata":{"id":"asO_qEyh9tM4"},"source":["**Compiling the model**"]},{"cell_type":"code","execution_count":35,"metadata":{"id":"Lr3p_Ow99tM4","executionInfo":{"status":"ok","timestamp":1649583825031,"user_tz":-540,"elapsed":6,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["model.compile(optimizer=\"rmsprop\",\n","              loss=\"categorical_crossentropy\", # softmax는 \"categorical_crossentropy\n","              metrics=[\"accuracy\"])"]},{"cell_type":"markdown","metadata":{"id":"SOmxWpwV9tM4"},"source":["### Validating your approach"]},{"cell_type":"markdown","metadata":{"id":"7KJpmjnb9tM4"},"source":["**Setting aside a validation set**"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"e_UzeeuL9tM5","executionInfo":{"status":"ok","timestamp":1649583826762,"user_tz":-540,"elapsed":13,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["x_val = x_train[:1000]\n","partial_x_train = x_train[1000:]\n","y_val = y_train[:1000]\n","partial_y_train = y_train[1000:]"]},{"cell_type":"markdown","metadata":{"id":"0J33axeW9tM5"},"source":["**Training the model**"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"w9CyFk3G9tM5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649583840581,"user_tz":-540,"elapsed":11472,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"2940c638-a9c0-4ffc-ffad-fe738040ed9d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","16/16 [==============================] - 1s 24ms/step - loss: 2.5850 - accuracy: 0.5198 - val_loss: 1.7105 - val_accuracy: 0.6450\n","Epoch 2/20\n","16/16 [==============================] - 0s 15ms/step - loss: 1.3837 - accuracy: 0.7159 - val_loss: 1.2756 - val_accuracy: 0.7250\n","Epoch 3/20\n","16/16 [==============================] - 0s 15ms/step - loss: 1.0151 - accuracy: 0.7834 - val_loss: 1.1095 - val_accuracy: 0.7540\n","Epoch 4/20\n","16/16 [==============================] - 0s 14ms/step - loss: 0.7996 - accuracy: 0.8317 - val_loss: 1.0188 - val_accuracy: 0.7830\n","Epoch 5/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.6412 - accuracy: 0.8654 - val_loss: 0.9618 - val_accuracy: 0.8010\n","Epoch 6/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.5168 - accuracy: 0.8935 - val_loss: 0.9299 - val_accuracy: 0.8090\n","Epoch 7/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.4160 - accuracy: 0.9112 - val_loss: 0.9118 - val_accuracy: 0.8220\n","Epoch 8/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.3399 - accuracy: 0.9266 - val_loss: 0.9168 - val_accuracy: 0.8180\n","Epoch 9/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.2825 - accuracy: 0.9370 - val_loss: 0.9204 - val_accuracy: 0.8200\n","Epoch 10/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.2364 - accuracy: 0.9442 - val_loss: 0.9199 - val_accuracy: 0.8230\n","Epoch 11/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.2041 - accuracy: 0.9503 - val_loss: 0.9599 - val_accuracy: 0.8220\n","Epoch 12/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.1833 - accuracy: 0.9520 - val_loss: 0.9603 - val_accuracy: 0.8050\n","Epoch 13/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.1621 - accuracy: 0.9553 - val_loss: 1.0134 - val_accuracy: 0.8040\n","Epoch 14/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.1477 - accuracy: 0.9562 - val_loss: 1.0325 - val_accuracy: 0.7980\n","Epoch 15/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.1395 - accuracy: 0.9559 - val_loss: 1.0669 - val_accuracy: 0.8050\n","Epoch 16/20\n","16/16 [==============================] - 0s 16ms/step - loss: 0.1314 - accuracy: 0.9568 - val_loss: 1.0526 - val_accuracy: 0.8080\n","Epoch 17/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.1253 - accuracy: 0.9569 - val_loss: 1.0799 - val_accuracy: 0.7960\n","Epoch 18/20\n","16/16 [==============================] - 0s 16ms/step - loss: 0.1241 - accuracy: 0.9540 - val_loss: 1.0739 - val_accuracy: 0.8050\n","Epoch 19/20\n","16/16 [==============================] - 0s 18ms/step - loss: 0.1155 - accuracy: 0.9567 - val_loss: 1.1289 - val_accuracy: 0.7960\n","Epoch 20/20\n","16/16 [==============================] - 0s 15ms/step - loss: 0.1111 - accuracy: 0.9578 - val_loss: 1.1348 - val_accuracy: 0.7940\n"]}],"source":["history = model.fit(partial_x_train,\n","                    partial_y_train,\n","                    epochs=20,\n","                    batch_size=512,\n","                    validation_data=(x_val, y_val))"]},{"cell_type":"markdown","metadata":{"id":"o_hKLBDV9tM5"},"source":["**Plotting the training and validation loss**"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"l-ZCY_ro9tM6","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1649583860561,"user_tz":-540,"elapsed":529,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"b182fd64-1bf3-4fde-93d9-13a33885e79c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["loss = history.history[\"loss\"]\n","val_loss = history.history[\"val_loss\"]\n","epochs = range(1, len(loss) + 1)\n","plt.plot(epochs, loss, \"bo\", label=\"Training loss\")\n","plt.plot(epochs, val_loss, \"b\", label=\"Validation loss\")\n","plt.title(\"Training and validation loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend()\n","plt.show()"]},{"cell_type":"markdown","source":["9번째 이후 과대적합 시작"],"metadata":{"id":"2AITSt8F3KP-"}},{"cell_type":"markdown","metadata":{"id":"Kd75_cO19tM6"},"source":["**Plotting the training and validation accuracy**"]},{"cell_type":"code","execution_count":39,"metadata":{"id":"9vUApUAR9tM6","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1649583864603,"user_tz":-540,"elapsed":559,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"fd86f1b4-38a2-4cc5-9160-262056f294cb"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["plt.clf() # 그래프 초기화\n","acc = history.history[\"accuracy\"]\n","val_acc = history.history[\"val_accuracy\"]\n","plt.plot(epochs, acc, \"bo\", label=\"Training accuracy\")\n","plt.plot(epochs, val_acc, \"b\", label=\"Validation accuracy\")\n","plt.title(\"Training and validation accuracy\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"q8CX7qeD9tM7"},"source":["**Retraining a model from scratch**"]},{"cell_type":"code","execution_count":40,"metadata":{"id":"4uLmJJ_t9tM8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649583920193,"user_tz":-540,"elapsed":3700,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"3fac24c7-4d38-4806-cbbd-bc2839f630ae"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/9\n","18/18 [==============================] - 1s 12ms/step - loss: 2.5252 - accuracy: 0.5603\n","Epoch 2/9\n","18/18 [==============================] - 0s 12ms/step - loss: 1.2907 - accuracy: 0.7265\n","Epoch 3/9\n","18/18 [==============================] - 0s 12ms/step - loss: 0.9572 - accuracy: 0.7939\n","Epoch 4/9\n","18/18 [==============================] - 0s 12ms/step - loss: 0.7540 - accuracy: 0.8419\n","Epoch 5/9\n","18/18 [==============================] - 0s 13ms/step - loss: 0.5976 - accuracy: 0.8776\n","Epoch 6/9\n","18/18 [==============================] - 0s 12ms/step - loss: 0.4784 - accuracy: 0.9024\n","Epoch 7/9\n","18/18 [==============================] - 0s 12ms/step - loss: 0.3869 - accuracy: 0.9186\n","Epoch 8/9\n","18/18 [==============================] - 0s 12ms/step - loss: 0.3175 - accuracy: 0.9294\n","Epoch 9/9\n","18/18 [==============================] - 0s 11ms/step - loss: 0.2683 - accuracy: 0.9381\n","71/71 [==============================] - 0s 3ms/step - loss: 0.9487 - accuracy: 0.7961\n"]}],"source":["model = keras.Sequential([\n","  layers.Dense(64, activation=\"relu\"),\n","  layers.Dense(64, activation=\"relu\"),\n","  layers.Dense(46, activation=\"softmax\")\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","model.fit(x_train,\n","          y_train,\n","          epochs=9, # epochs 9\n","          batch_size=512)\n","results = model.evaluate(x_test, y_test)"]},{"cell_type":"code","execution_count":41,"metadata":{"id":"byi8lhBC9tM8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649583922873,"user_tz":-540,"elapsed":461,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"4ac76a85-bb9c-4faf-c535-42efa06b6523"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.9486836194992065, 0.7960819005966187]"]},"metadata":{},"execution_count":41}],"source":["results"]},{"cell_type":"code","execution_count":42,"metadata":{"id":"72Zv1ZLG9tM8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649583935935,"user_tz":-540,"elapsed":485,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"e0519301-09c2-470c-d05e-84b0bc7b5e48"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.18477292965271594"]},"metadata":{},"execution_count":42}],"source":["# 무작위로 분류하면 정확도 18%\n","import copy\n","test_labels_copy = copy.copy(test_labels)\n","np.random.shuffle(test_labels_copy)\n","hits_array = np.array(test_labels) == np.array(test_labels_copy)\n","hits_array.mean()"]},{"cell_type":"markdown","metadata":{"id":"hu4hP0Dn9tM9"},"source":["### Generating predictions on new data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qrcusxCb9tM9"},"outputs":[],"source":["# 새로운 데이터에 대해 예측하기\n","predictions = model.predict(x_test)"]},{"cell_type":"code","source":["predictions[0] #8.66002977e-01 가장큼"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YrlxrCpXRbsw","executionInfo":{"status":"ok","timestamp":1648567381799,"user_tz":-540,"elapsed":621,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"eca5eca4-dcbe-4777-b5d7-81f940033965"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3.35980658e-05, 3.05166934e-04, 4.94920932e-05, 8.66002977e-01,\n","       1.10784784e-01, 7.50716281e-05, 1.43029552e-04, 5.36420666e-05,\n","       1.70338596e-03, 3.42702078e-05, 4.39578900e-04, 5.60864108e-04,\n","       5.63664187e-04, 7.55456800e-04, 1.24811020e-04, 2.78129119e-06,\n","       1.00080613e-02, 3.69925954e-04, 3.12243064e-04, 3.03737982e-03,\n","       2.24817265e-03, 6.08604096e-05, 8.65770380e-06, 1.50519249e-04,\n","       5.15797401e-05, 4.09848653e-05, 3.29435716e-05, 3.23625100e-05,\n","       1.40035758e-04, 1.55929956e-05, 1.70996311e-04, 5.54728285e-05,\n","       7.31470864e-05, 1.16247429e-05, 6.69942237e-05, 2.76436708e-06,\n","       3.24238325e-04, 9.60171110e-06, 6.18123377e-05, 8.41757632e-04,\n","       5.68106516e-05, 1.10137153e-04, 2.24550058e-05, 3.39488834e-05,\n","       1.16958226e-05, 4.63530614e-06], dtype=float32)"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oGWfuWgO9tM-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648567362832,"user_tz":-540,"elapsed":16,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"b12a6f09-5155-4569-9ea7-3120c63445c7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(46,)"]},"metadata":{},"execution_count":49}],"source":["predictions[0].shape # predictions의 각 항목은 길이가 46인 벡터"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Xezg2ssO9tM-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648567362833,"user_tz":-540,"elapsed":14,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"41af07e3-7728-469d-bc16-7e14243bb37b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{},"execution_count":50}],"source":["np.sum(predictions[0]) # 이 벡터의원소 합은 1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CeKW9A2Y9tM-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648567403917,"user_tz":-540,"elapsed":447,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"bde756ab-e964-4e91-a020-10b519e47194"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":53}],"source":["np.argmax(predictions[0]) # 가장 큰 값이 예측 클래스 즉 가장 확률이 높은 클래스"]},{"cell_type":"markdown","metadata":{"id":"c_NdjKpW9tM-"},"source":["### A different way to handle the labels and the loss"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6MKR5FVL9tM-"},"outputs":[],"source":["y_train = np.array(train_labels)\n","y_test = np.array(test_labels)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LYTWPyIJ9tM_"},"outputs":[],"source":["model.compile(optimizer=\"rmsprop\",\n","              loss=\"sparse_categorical_crossentropy\", # 정수 레이블을 사용할 때\n","              metrics=[\"accuracy\"])"]},{"cell_type":"markdown","metadata":{"id":"aR7nZguL9tM_"},"source":["### The importance of having sufficiently large intermediate layers"]},{"cell_type":"markdown","metadata":{"id":"QA59HTGf9tM_"},"source":["**A model with an information bottleneck**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EVKxpllG9tM_"},"outputs":[],"source":["model = keras.Sequential([\n","    layers.Dense(64, activation=\"relu\"),\n","    layers.Dense(4, activation=\"relu\"), # 이렇게 히든 유닛이 46 보다 많이 적어서는 안됨-> 검증 정확도 감소\n","    layers.Dense(46, activation=\"softmax\")\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","model.fit(partial_x_train,\n","          partial_y_train,\n","          epochs=20,\n","          batch_size=128,\n","          validation_data=(x_val, y_val))"]},{"cell_type":"markdown","metadata":{"id":"wfA9YF1D9tNA"},"source":["### Further experiments"]},{"cell_type":"markdown","metadata":{"id":"XIhrf_kR9tNA"},"source":["### Wrapping up"]},{"cell_type":"markdown","source":["* 레이블을 범주형 인코딩(원-핫 인코딩)으로 인코딩하고 categorial_crossentropy 손실 함수 사용\n","* 레이블을 정수로 인코딩하고 sparse_categorical_crossentropy 손실 함수 사용"],"metadata":{"id":"M0a3Wm8x5VK7"}},{"cell_type":"markdown","metadata":{"id":"_Fqjk3FZ9tNB"},"source":["## Predicting house prices: A regression example"]},{"cell_type":"markdown","metadata":{"id":"V2QZ4nBB9tNB"},"source":["### The Boston Housing Price dataset 보스턴 주택 가격 데이터 셋"]},{"cell_type":"markdown","metadata":{"id":"Unrwtnlc9tNC"},"source":["**Loading the Boston housing dataset**"]},{"cell_type":"code","execution_count":43,"metadata":{"id":"tIgVzxXE9tND","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649584803477,"user_tz":-540,"elapsed":1125,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"7201da31-b43a-4807-927c-794efa8d7445"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/boston_housing.npz\n","57344/57026 [==============================] - 0s 0us/step\n","65536/57026 [==================================] - 0s 0us/step\n"]}],"source":["from tensorflow.keras.datasets import boston_housing\n","(train_data, train_targets), (test_data, test_targets) = boston_housing.load_data()"]},{"cell_type":"code","execution_count":44,"metadata":{"id":"LkSLIppY9tNE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649584805929,"user_tz":-540,"elapsed":9,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"bc881df5-069a-4a49-e28a-a58877e72881"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(404, 13)"]},"metadata":{},"execution_count":44}],"source":["train_data.shape # 404개의 훈련 샘플, 13개 특성"]},{"cell_type":"code","execution_count":45,"metadata":{"id":"xMEK2ns39tNE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649584808962,"user_tz":-540,"elapsed":8,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"2a0f6a35-0c43-4f28-9ca4-bbfd4a2a4e53"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(102, 13)"]},"metadata":{},"execution_count":45}],"source":["test_data.shape"]},{"cell_type":"code","execution_count":46,"metadata":{"id":"cxc2AQC69tNE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649584853132,"user_tz":-540,"elapsed":470,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"0e3eddc1-18a7-4160-d8c3-60b70708caf6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([15.2, 42.3, 50. , 21.1, 17.7, 18.5, 11.3, 15.6, 15.6, 14.4, 12.1,\n","       17.9, 23.1, 19.9, 15.7,  8.8, 50. , 22.5, 24.1, 27.5, 10.9, 30.8,\n","       32.9, 24. , 18.5, 13.3, 22.9, 34.7, 16.6, 17.5, 22.3, 16.1, 14.9,\n","       23.1, 34.9, 25. , 13.9, 13.1, 20.4, 20. , 15.2, 24.7, 22.2, 16.7,\n","       12.7, 15.6, 18.4, 21. , 30.1, 15.1, 18.7,  9.6, 31.5, 24.8, 19.1,\n","       22. , 14.5, 11. , 32. , 29.4, 20.3, 24.4, 14.6, 19.5, 14.1, 14.3,\n","       15.6, 10.5,  6.3, 19.3, 19.3, 13.4, 36.4, 17.8, 13.5, 16.5,  8.3,\n","       14.3, 16. , 13.4, 28.6, 43.5, 20.2, 22. , 23. , 20.7, 12.5, 48.5,\n","       14.6, 13.4, 23.7, 50. , 21.7, 39.8, 38.7, 22.2, 34.9, 22.5, 31.1,\n","       28.7, 46. , 41.7, 21. , 26.6, 15. , 24.4, 13.3, 21.2, 11.7, 21.7,\n","       19.4, 50. , 22.8, 19.7, 24.7, 36.2, 14.2, 18.9, 18.3, 20.6, 24.6,\n","       18.2,  8.7, 44. , 10.4, 13.2, 21.2, 37. , 30.7, 22.9, 20. , 19.3,\n","       31.7, 32. , 23.1, 18.8, 10.9, 50. , 19.6,  5. , 14.4, 19.8, 13.8,\n","       19.6, 23.9, 24.5, 25. , 19.9, 17.2, 24.6, 13.5, 26.6, 21.4, 11.9,\n","       22.6, 19.6,  8.5, 23.7, 23.1, 22.4, 20.5, 23.6, 18.4, 35.2, 23.1,\n","       27.9, 20.6, 23.7, 28. , 13.6, 27.1, 23.6, 20.6, 18.2, 21.7, 17.1,\n","        8.4, 25.3, 13.8, 22.2, 18.4, 20.7, 31.6, 30.5, 20.3,  8.8, 19.2,\n","       19.4, 23.1, 23. , 14.8, 48.8, 22.6, 33.4, 21.1, 13.6, 32.2, 13.1,\n","       23.4, 18.9, 23.9, 11.8, 23.3, 22.8, 19.6, 16.7, 13.4, 22.2, 20.4,\n","       21.8, 26.4, 14.9, 24.1, 23.8, 12.3, 29.1, 21. , 19.5, 23.3, 23.8,\n","       17.8, 11.5, 21.7, 19.9, 25. , 33.4, 28.5, 21.4, 24.3, 27.5, 33.1,\n","       16.2, 23.3, 48.3, 22.9, 22.8, 13.1, 12.7, 22.6, 15. , 15.3, 10.5,\n","       24. , 18.5, 21.7, 19.5, 33.2, 23.2,  5. , 19.1, 12.7, 22.3, 10.2,\n","       13.9, 16.3, 17. , 20.1, 29.9, 17.2, 37.3, 45.4, 17.8, 23.2, 29. ,\n","       22. , 18. , 17.4, 34.6, 20.1, 25. , 15.6, 24.8, 28.2, 21.2, 21.4,\n","       23.8, 31. , 26.2, 17.4, 37.9, 17.5, 20. ,  8.3, 23.9,  8.4, 13.8,\n","        7.2, 11.7, 17.1, 21.6, 50. , 16.1, 20.4, 20.6, 21.4, 20.6, 36.5,\n","        8.5, 24.8, 10.8, 21.9, 17.3, 18.9, 36.2, 14.9, 18.2, 33.3, 21.8,\n","       19.7, 31.6, 24.8, 19.4, 22.8,  7.5, 44.8, 16.8, 18.7, 50. , 50. ,\n","       19.5, 20.1, 50. , 17.2, 20.8, 19.3, 41.3, 20.4, 20.5, 13.8, 16.5,\n","       23.9, 20.6, 31.5, 23.3, 16.8, 14. , 33.8, 36.1, 12.8, 18.3, 18.7,\n","       19.1, 29. , 30.1, 50. , 50. , 22. , 11.9, 37.6, 50. , 22.7, 20.8,\n","       23.5, 27.9, 50. , 19.3, 23.9, 22.6, 15.2, 21.7, 19.2, 43.8, 20.3,\n","       33.2, 19.9, 22.5, 32.7, 22. , 17.1, 19. , 15. , 16.1, 25.1, 23.7,\n","       28.7, 37.2, 22.6, 16.4, 25. , 29.8, 22.1, 17.4, 18.1, 30.3, 17.5,\n","       24.7, 12.6, 26.5, 28.7, 13.3, 10.4, 24.4, 23. , 20. , 17.8,  7. ,\n","       11.8, 24.4, 13.8, 19.4, 25.2, 19.4, 19.4, 29.1])"]},"metadata":{},"execution_count":46}],"source":["train_targets"]},{"cell_type":"markdown","metadata":{"id":"69IqHBBg9tNE"},"source":["### Preparing the data"]},{"cell_type":"markdown","metadata":{"id":"tm2HP5mQ9tNF"},"source":["**Normalizing the data**"]},{"cell_type":"code","execution_count":47,"metadata":{"id":"jaI8mvOQ9tNF","executionInfo":{"status":"ok","timestamp":1649584902837,"user_tz":-540,"elapsed":489,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["# 상이한 스케일 가진 값 정규화\n","mean = train_data.mean(axis=0)\n","train_data -= mean\n","std = train_data.std(axis=0)\n","train_data /= std\n","test_data -= mean\n","test_data /= std"]},{"cell_type":"markdown","metadata":{"id":"kg7zj68P9tNF"},"source":["### Building your model"]},{"cell_type":"markdown","metadata":{"id":"wPqakQvS9tNF"},"source":["**Model definition**"]},{"cell_type":"markdown","source":["회귀는 활성화 함수 x"],"metadata":{"id":"o5w7WMnw8p5b"}},{"cell_type":"code","execution_count":48,"metadata":{"id":"oyaWWqk89tNG","executionInfo":{"status":"ok","timestamp":1649584906871,"user_tz":-540,"elapsed":7,"user":{"displayName":"유나현","userId":"01437638864425519006"}}},"outputs":[],"source":["def build_model():\n","    model = keras.Sequential([\n","        layers.Dense(64, activation=\"relu\"),\n","        layers.Dense(64, activation=\"relu\"),\n","        layers.Dense(1)\n","    ])\n","    model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n","    return model"]},{"cell_type":"markdown","metadata":{"id":"aS3F7Tgp9tNG"},"source":["### Validating your approach using K-fold validation"]},{"cell_type":"markdown","metadata":{"id":"5rG962Qo9tNG"},"source":["**K-fold validation**"]},{"cell_type":"code","execution_count":49,"metadata":{"id":"OASxonI19tNG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649585737197,"user_tz":-540,"elapsed":22407,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"cce86214-3026-4d7e-decf-a1c5df013d09"},"outputs":[{"output_type":"stream","name":"stdout","text":["Processing fold #0\n","Processing fold #1\n","Processing fold #2\n","Processing fold #3\n"]}],"source":["k = 4\n","num_val_samples = len(train_data) // k\n","num_epochs = 100\n","all_scores = []\n","for i in range(k):\n","    print(f\"Processing fold #{i}\")\n","    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n","    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n","    partial_train_data = np.concatenate(\n","        [train_data[:i * num_val_samples],\n","         train_data[(i + 1) * num_val_samples:]],\n","        axis=0)\n","    partial_train_targets = np.concatenate(\n","        [train_targets[:i * num_val_samples],\n","         train_targets[(i + 1) * num_val_samples:]],\n","        axis=0)\n","    model = build_model()\n","    model.fit(partial_train_data, partial_train_targets,\n","              epochs=num_epochs, batch_size=16, verbose=0)\n","    val_mse, val_mae = model.evaluate(val_data, val_targets, verbose=0)\n","    all_scores.append(val_mae)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"61jlGRwm9tNH"},"outputs":[],"source":["all_scores"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"skZAmvjN9tNH"},"outputs":[],"source":["np.mean(all_scores)"]},{"cell_type":"markdown","metadata":{"id":"ep_GOQkr9tNH"},"source":["**Saving the validation logs at each fold**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IMUBJRqO9tNI"},"outputs":[],"source":["num_epochs = 500\n","all_mae_histories = []\n","for i in range(k):\n","    print(f\"Processing fold #{i}\")\n","    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n","    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n","    partial_train_data = np.concatenate(\n","        [train_data[:i * num_val_samples],\n","         train_data[(i + 1) * num_val_samples:]],\n","        axis=0)\n","    partial_train_targets = np.concatenate(\n","        [train_targets[:i * num_val_samples],\n","         train_targets[(i + 1) * num_val_samples:]],\n","        axis=0)\n","    model = build_model()\n","    history = model.fit(partial_train_data, partial_train_targets,\n","                        validation_data=(val_data, val_targets),\n","                        epochs=num_epochs, batch_size=16, verbose=0)\n","    mae_history = history.history[\"val_mae\"]\n","    all_mae_histories.append(mae_history)"]},{"cell_type":"markdown","metadata":{"id":"yyvYZgTb9tNI"},"source":["**Building the history of successive mean K-fold validation scores**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iG0K4YUl9tNI"},"outputs":[],"source":["average_mae_history = [\n","    np.mean([x[i] for x in all_mae_histories]) for i in range(num_epochs)]"]},{"cell_type":"markdown","metadata":{"id":"v8iLyyfU9tNJ"},"source":["**Plotting validation scores**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K2oAOjyD9tNJ"},"outputs":[],"source":["plt.plot(range(1, len(average_mae_history) + 1), average_mae_history)\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Validation MAE\")\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"OXc8y8zk9tNJ"},"source":["**Plotting validation scores, excluding the first 10 data points**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5Afgja8c9tNK"},"outputs":[],"source":["truncated_mae_history = average_mae_history[10:]\n","plt.plot(range(1, len(truncated_mae_history) + 1), truncated_mae_history)\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Validation MAE\")\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"ro1tiDO79tNK"},"source":["**Training the final model**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GjxmbPKi9tNK"},"outputs":[],"source":["model = build_model()\n","model.fit(train_data, train_targets,\n","          epochs=130, batch_size=16, verbose=0)\n","test_mse_score, test_mae_score = model.evaluate(test_data, test_targets)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ux35Sadr9tNL"},"outputs":[],"source":["test_mae_score"]},{"cell_type":"markdown","metadata":{"id":"wlJx_Zdv9tNL"},"source":["### Generating predictions on new data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5w0Sf2wu9tNL"},"outputs":[],"source":["predictions = model.predict(test_data)\n","predictions[0]"]},{"cell_type":"markdown","metadata":{"id":"2fIkp-yi9tNL"},"source":["### Wrapping up"]},{"cell_type":"markdown","metadata":{"id":"LuBKa8V19tNM"},"source":["## Summary"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"chapter04_getting-started-with-neural-networks.i의 사본","provenance":[{"file_id":"https://github.com/fchollet/deep-learning-with-python-notebooks/blob/master/chapter04_getting-started-with-neural-networks.ipynb","timestamp":1648562203770}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}