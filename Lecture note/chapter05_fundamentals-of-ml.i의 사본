{"cells":[{"cell_type":"markdown","metadata":{"id":"OOx43mktwvhI"},"source":["This is a companion notebook for the book [Deep Learning with Python, Second Edition](https://www.manning.com/books/deep-learning-with-python-second-edition?a_aid=keras&a_bid=76564dff). For readability, it only contains runnable code blocks and section titles, and omits everything else in the book: text paragraphs, figures, and pseudocode.\n","\n","**If you want to be able to follow what's going on, I recommend reading the notebook side by side with your copy of the book.**\n","\n","This notebook was generated for TensorFlow 2.6."]},{"cell_type":"markdown","metadata":{"id":"bR3RU3dewvhS"},"source":["# Fundamentals of machine learning"]},{"cell_type":"markdown","metadata":{"id":"8_B_4OhIwvhT"},"source":["## Generalization: The goal of machine learning"]},{"cell_type":"markdown","metadata":{"id":"MxOMOJu5wvhU"},"source":["### Underfitting and overfitting"]},{"cell_type":"markdown","metadata":{"id":"HM3U_VRxwvhV"},"source":["#### Noisy training data"]},{"cell_type":"markdown","metadata":{"id":"HbMl8r6dwvhX"},"source":["#### Ambiguous features"]},{"cell_type":"markdown","metadata":{"id":"QrEd4oemwvhZ"},"source":["#### Rare features and spurious correlations"]},{"cell_type":"markdown","metadata":{"id":"40Z0GyL2wvhc"},"source":["**Adding white-noise channels or all-zeros channels to MNIST**"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"8B_CegUvwvhf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649609609414,"user_tz":-540,"elapsed":9266,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"e018746a-d785-4011-ba81-1f07e3d1da2d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n","11501568/11490434 [==============================] - 0s 0us/step\n"]}],"source":["from tensorflow.keras.datasets import mnist\n","import numpy as np\n","\n","(train_images, train_labels), _ = mnist.load_data()\n","train_images = train_images.reshape((60000, 28 * 28))\n","train_images = train_images.astype(\"float32\") / 255\n","\n","train_images_with_noise_channels = np.concatenate(\n","    [train_images, np.random.random((len(train_images), 784))], axis=1) #random noise added to data\n","\n","train_images_with_zeros_channels = np.concatenate(\n","    [train_images, np.zeros((len(train_images), 784))], axis=1)"]},{"cell_type":"markdown","metadata":{"id":"bbAaaGg3wvhj"},"source":["**Training the same model on MNIST data with noise channels or all-zero channels**"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"BI6NUuobwvhk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649610096784,"user_tz":-540,"elapsed":87339,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"889bdf16-7bc7-4c25-cedd-5c67eade147e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","375/375 [==============================] - 6s 6ms/step - loss: 0.6156 - accuracy: 0.8139 - val_loss: 0.3319 - val_accuracy: 0.8942\n","Epoch 2/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.2479 - accuracy: 0.9224 - val_loss: 0.2215 - val_accuracy: 0.9316\n","Epoch 3/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.1611 - accuracy: 0.9501 - val_loss: 0.1792 - val_accuracy: 0.9436\n","Epoch 4/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.1137 - accuracy: 0.9638 - val_loss: 0.1720 - val_accuracy: 0.9523\n","Epoch 5/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0842 - accuracy: 0.9734 - val_loss: 0.1315 - val_accuracy: 0.9615\n","Epoch 6/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0617 - accuracy: 0.9804 - val_loss: 0.1405 - val_accuracy: 0.9620\n","Epoch 7/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0466 - accuracy: 0.9854 - val_loss: 0.1354 - val_accuracy: 0.9643\n","Epoch 8/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0363 - accuracy: 0.9885 - val_loss: 0.1241 - val_accuracy: 0.9691\n","Epoch 9/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0257 - accuracy: 0.9918 - val_loss: 0.1486 - val_accuracy: 0.9643\n","Epoch 10/10\n","375/375 [==============================] - 2s 6ms/step - loss: 0.0227 - accuracy: 0.9925 - val_loss: 0.1396 - val_accuracy: 0.9700\n","Epoch 1/10\n","375/375 [==============================] - 3s 6ms/step - loss: 0.2950 - accuracy: 0.9139 - val_loss: 0.1532 - val_accuracy: 0.9558\n","Epoch 2/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.1186 - accuracy: 0.9637 - val_loss: 0.1097 - val_accuracy: 0.9675\n","Epoch 3/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0795 - accuracy: 0.9766 - val_loss: 0.0970 - val_accuracy: 0.9698\n","Epoch 4/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0565 - accuracy: 0.9832 - val_loss: 0.0892 - val_accuracy: 0.9744\n","Epoch 5/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0417 - accuracy: 0.9878 - val_loss: 0.0841 - val_accuracy: 0.9764\n","Epoch 6/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0319 - accuracy: 0.9902 - val_loss: 0.0808 - val_accuracy: 0.9761\n","Epoch 7/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0241 - accuracy: 0.9932 - val_loss: 0.0780 - val_accuracy: 0.9795\n","Epoch 8/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0184 - accuracy: 0.9945 - val_loss: 0.0825 - val_accuracy: 0.9787\n","Epoch 9/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0138 - accuracy: 0.9959 - val_loss: 0.1035 - val_accuracy: 0.9733\n","Epoch 10/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0109 - accuracy: 0.9965 - val_loss: 0.0858 - val_accuracy: 0.9806\n"]}],"source":["from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","def get_model():\n","    model = keras.Sequential([\n","        layers.Dense(512, activation=\"relu\"),\n","        layers.Dense(10, activation=\"softmax\")\n","    ])\n","    model.compile(optimizer=\"rmsprop\",\n","                  loss=\"sparse_categorical_crossentropy\",\n","                  metrics=[\"accuracy\"])\n","    return model\n","\n","model = get_model()\n","history_noise = model.fit( #noisy data set\n","    train_images_with_noise_channels, train_labels,\n","    epochs=10,\n","    batch_size=128,\n","    validation_split=0.2)\n","\n","model = get_model()\n","history_zeros = model.fit(\n","    train_images_with_zeros_channels, train_labels,\n","    epochs=10,\n","    batch_size=128,\n","    validation_split=0.2)"]},{"cell_type":"code","source":["model = get_model()\n","history1 = model.fit(\n","    train_images_with_zeros_channels, train_labels,\n","    epochs=10,\n","    batch_size=128,\n","    validation_split=0.2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8vAGXqWAbVdX","executionInfo":{"status":"ok","timestamp":1649610182653,"user_tz":-540,"elapsed":21683,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"e2a6b02a-1fa4-4291-c693-8f1a2a1e2c87"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","375/375 [==============================] - 3s 6ms/step - loss: 0.2898 - accuracy: 0.9151 - val_loss: 0.1443 - val_accuracy: 0.9592\n","Epoch 2/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.1202 - accuracy: 0.9644 - val_loss: 0.1126 - val_accuracy: 0.9676\n","Epoch 3/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0790 - accuracy: 0.9775 - val_loss: 0.0901 - val_accuracy: 0.9722\n","Epoch 4/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0559 - accuracy: 0.9837 - val_loss: 0.0883 - val_accuracy: 0.9747\n","Epoch 5/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0431 - accuracy: 0.9875 - val_loss: 0.0850 - val_accuracy: 0.9758\n","Epoch 6/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0331 - accuracy: 0.9901 - val_loss: 0.0770 - val_accuracy: 0.9787\n","Epoch 7/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0252 - accuracy: 0.9925 - val_loss: 0.0776 - val_accuracy: 0.9780\n","Epoch 8/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0181 - accuracy: 0.9946 - val_loss: 0.0836 - val_accuracy: 0.9792\n","Epoch 9/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0148 - accuracy: 0.9958 - val_loss: 0.0827 - val_accuracy: 0.9793\n","Epoch 10/10\n","375/375 [==============================] - 2s 6ms/step - loss: 0.0108 - accuracy: 0.9972 - val_loss: 0.0864 - val_accuracy: 0.9796\n"]}]},{"cell_type":"markdown","metadata":{"id":"nYitwDmhwvhm"},"source":["**Plotting a validation accuracy comparison**"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"xsrplCEcwvhm","colab":{"base_uri":"https://localhost:8080/","height":313},"executionInfo":{"status":"ok","timestamp":1649610188446,"user_tz":-540,"elapsed":829,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"bbcf24c3-7621-47a6-d548-0d91065e4701"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f12d8a8ed90>"]},"metadata":{},"execution_count":4},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["import matplotlib.pyplot as plt\n","val_acc_noise = history_noise.history[\"val_accuracy\"]\n","val_acc_zeros = history_zeros.history[\"val_accuracy\"]\n","epochs = range(1, 11)\n","plt.plot(epochs, val_acc_noise, \"b-\",\n","         label=\"Validation accuracy with noise channels\")\n","plt.plot(epochs, val_acc_zeros, \"b--\",\n","         label=\"Validation accuracy with zeros channels\")\n","plt.title(\"Effect of noise channels on validation accuracy\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend()"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","val_acc = history1.history[\"val_accuracy\"]\n","val_acc_zeros = history_zeros.history[\"val_accuracy\"]\n","epochs = range(1, 11)\n","plt.plot(epochs, val_acc, \"b-\",\n","         label=\"Validation accuracy with original data\")\n","plt.plot(epochs, val_acc_zeros, \"b--\",\n","         label=\"Validation accuracy with zeros channels\")\n","plt.title(\"Effect of noise channels on validation accuracy\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"cOrRngdXblbL","executionInfo":{"status":"ok","timestamp":1649610291018,"user_tz":-540,"elapsed":562,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"b0665893-1d72-4c33-9773-a2ad27d9046f"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f12d9c5f190>"]},"metadata":{},"execution_count":6},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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sGFDGjZsyI8//kjv3r0ZPHhwynEfeeQRhgwZkib9AwcOTLkR33PPPbRt2xaASZMm0a1btzTX/aGHHuL333+nUaNGPBDMnLZ9+3auvPJKatWqRbdu3YjUD23OnDmcdtppNGjQgA4dOvDPP/8Alpu8++67adq0KUOGDEmTc5wxYwYNGjRIea969eoBaXM5ffv2pXv37rRp04YaNWqkCSiXXXYZTZo0oW7durz22msHpCm9YcOGUbNmTZo3b84PP/yQsvzzzz/n1FNPJSEhgXPOOYf169ezbNkyhg4dyvPPP0+jRo2YOnVqxO1ykweObOrVCzp08MCRl5UrV47mzZvz1VdfAZbb6NSpEyLCk08+SWJiIvPmzePbb79l3rx5GR5n5syZjBw5kjlz5vDll18yY8aMlHWXX345M2bMYO7cudSuXZs333yTFi1acOmllzJw4EDmzJnDiSeemLL97t27uf766xk1ahTz588nKSmJV155JWV9hQoVmDVrFrfddlvE4rBjjjmGb775hlmzZjFq1KiUYpSvvvqKzz77jOnTpzN37lwefPBBALp168Ydd9zB3Llz+fHHH6lcufJBr1v58uWZNWsWXbp0iXh+AHfddRetW7dm7ty5zJo1i7p169K9e/eUop/k5GRGjhzJ1ekGb2vVqhVTp04FrBho+/bt7Nu3j6lTp3LmmWem2fbpp5/mxBNPZM6cOQwcOBCA2bNnM3jwYBYuXMgff/yR5qYbcu211zJgwADmzZtH/fr1eeyxx1LW7d27l8TERO5LN6nODTfcwKuvvsqcOXMoUqRIhtdm8eLFjBs3jp9//pnHHnuMfcHkO2+99RYzZ84kMTGRF154gU2bNmV4jLVr19KnTx9++OEHvv/++zQ50zPOOIOffvqJ2bNn06VLF5555hmqVavGrbfeyj333MOcOXNo1apVxO1yk/fjyIb1663vxoMP+hAj0Qr7IZqrQsVV7du3Z+TIkSk3vg8++IDXXnuNpKQk1q5dy8KFC2nQoEHEY0ydOpUOHTpQMujQc2lYpdaCBQt49NFH2bx5M9u3b+f888/PND1LliyhevXq1AwmpL/uuut4+eWXuTvIPl1+uc0y0KRJEz755JMD9t+3bx89evRIucH9+uuvAEyYMIEbbrghJY3lypVj27ZtrF69mg4dOgDWySsancPalmd0fpMmTUoJEkWK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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"lnNi9Jo2wvhn"},"source":["### The nature of generalization in deep learning"]},{"cell_type":"markdown","metadata":{"id":"N33sTXkvwvhn"},"source":["**Fitting a MNIST model with randomly shuffled labels**"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"Dzagu3pcwvho","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649610590700,"user_tz":-540,"elapsed":177716,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"8aaa3057-2004-46cb-8b35-be2b0daebc77"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","375/375 [==============================] - 3s 6ms/step - loss: 2.3170 - accuracy: 0.1037 - val_loss: 2.3070 - val_accuracy: 0.1058\n","Epoch 2/100\n","375/375 [==============================] - 2s 4ms/step - loss: 2.2999 - accuracy: 0.1161 - val_loss: 2.3118 - val_accuracy: 0.1080\n","Epoch 3/100\n","375/375 [==============================] - 2s 4ms/step - loss: 2.2910 - accuracy: 0.1242 - val_loss: 2.3169 - val_accuracy: 0.1030\n","Epoch 4/100\n","375/375 [==============================] - 2s 4ms/step - loss: 2.2779 - accuracy: 0.1370 - val_loss: 2.3241 - val_accuracy: 0.1026\n","Epoch 5/100\n","375/375 [==============================] - 2s 5ms/step - loss: 2.2611 - accuracy: 0.1516 - val_loss: 2.3384 - val_accuracy: 0.0960\n","Epoch 6/100\n","375/375 [==============================] - 2s 4ms/step - loss: 2.2410 - accuracy: 0.1651 - val_loss: 2.3429 - val_accuracy: 0.1053\n","Epoch 7/100\n","375/375 [==============================] - 2s 4ms/step - loss: 2.2174 - accuracy: 0.1794 - val_loss: 2.3682 - val_accuracy: 0.1021\n","Epoch 8/100\n","375/375 [==============================] - 2s 4ms/step - loss: 2.1914 - accuracy: 0.1947 - val_loss: 2.3833 - val_accuracy: 0.1008\n","Epoch 9/100\n","375/375 [==============================] - 2s 4ms/step - loss: 2.1644 - accuracy: 0.2103 - val_loss: 2.4019 - val_accuracy: 0.1002\n","Epoch 10/100\n","375/375 [==============================] - 2s 5ms/step - loss: 2.1328 - accuracy: 0.2258 - val_loss: 2.4161 - val_accuracy: 0.1022\n","Epoch 11/100\n","375/375 [==============================] - 2s 4ms/step - loss: 2.1024 - accuracy: 0.2405 - val_loss: 2.4378 - val_accuracy: 0.1020\n","Epoch 12/100\n","375/375 [==============================] - 2s 4ms/step - loss: 2.0698 - accuracy: 0.2573 - val_loss: 2.4581 - val_accuracy: 0.1040\n","Epoch 13/100\n","375/375 [==============================] - 2s 5ms/step - loss: 2.0373 - accuracy: 0.2725 - val_loss: 2.4905 - val_accuracy: 0.0972\n","Epoch 14/100\n","375/375 [==============================] - 2s 4ms/step - loss: 2.0054 - accuracy: 0.2868 - val_loss: 2.5278 - val_accuracy: 0.1015\n","Epoch 15/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.9737 - accuracy: 0.2991 - val_loss: 2.5480 - val_accuracy: 0.1010\n","Epoch 16/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.9390 - accuracy: 0.3148 - val_loss: 2.5732 - val_accuracy: 0.1016\n","Epoch 17/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.9069 - accuracy: 0.3265 - val_loss: 2.6070 - val_accuracy: 0.1012\n","Epoch 18/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.8738 - accuracy: 0.3374 - val_loss: 2.6404 - val_accuracy: 0.1045\n","Epoch 19/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.8420 - accuracy: 0.3519 - val_loss: 2.6637 - val_accuracy: 0.1007\n","Epoch 20/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.8119 - accuracy: 0.3638 - val_loss: 2.7167 - val_accuracy: 0.1052\n","Epoch 21/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.7801 - accuracy: 0.3768 - val_loss: 2.7405 - val_accuracy: 0.1036\n","Epoch 22/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.7509 - accuracy: 0.3939 - val_loss: 2.7897 - val_accuracy: 0.1002\n","Epoch 23/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.7201 - accuracy: 0.3992 - val_loss: 2.8251 - val_accuracy: 0.1036\n","Epoch 24/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.6924 - accuracy: 0.4116 - val_loss: 2.8577 - val_accuracy: 0.1001\n","Epoch 25/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.6624 - accuracy: 0.4241 - val_loss: 2.8922 - val_accuracy: 0.1048\n","Epoch 26/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.6345 - accuracy: 0.4333 - val_loss: 2.9383 - val_accuracy: 0.1003\n","Epoch 27/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.6090 - accuracy: 0.4437 - val_loss: 2.9660 - val_accuracy: 0.1043\n","Epoch 28/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.5822 - accuracy: 0.4534 - val_loss: 3.0178 - val_accuracy: 0.1053\n","Epoch 29/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.5567 - accuracy: 0.4605 - val_loss: 3.0645 - val_accuracy: 0.1017\n","Epoch 30/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.5294 - accuracy: 0.4725 - val_loss: 3.1074 - val_accuracy: 0.1004\n","Epoch 31/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.5054 - accuracy: 0.4793 - val_loss: 3.1558 - val_accuracy: 0.1048\n","Epoch 32/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.4802 - accuracy: 0.4904 - val_loss: 3.1863 - val_accuracy: 0.1040\n","Epoch 33/100\n","375/375 [==============================] - 3s 7ms/step - loss: 1.4576 - accuracy: 0.4973 - val_loss: 3.2548 - val_accuracy: 0.1031\n","Epoch 34/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.4345 - accuracy: 0.5073 - val_loss: 3.2775 - val_accuracy: 0.1018\n","Epoch 35/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.4124 - accuracy: 0.5159 - val_loss: 3.3160 - val_accuracy: 0.1042\n","Epoch 36/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.3896 - accuracy: 0.5259 - val_loss: 3.3869 - val_accuracy: 0.1023\n","Epoch 37/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.3667 - accuracy: 0.5319 - val_loss: 3.4298 - val_accuracy: 0.1007\n","Epoch 38/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.3451 - accuracy: 0.5385 - val_loss: 3.4669 - val_accuracy: 0.1002\n","Epoch 39/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.3250 - accuracy: 0.5467 - val_loss: 3.5320 - val_accuracy: 0.0973\n","Epoch 40/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.3055 - accuracy: 0.5555 - val_loss: 3.5540 - val_accuracy: 0.1023\n","Epoch 41/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.2858 - accuracy: 0.5626 - val_loss: 3.6262 - val_accuracy: 0.1024\n","Epoch 42/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.2647 - accuracy: 0.5682 - val_loss: 3.6457 - val_accuracy: 0.1066\n","Epoch 43/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.2457 - accuracy: 0.5777 - val_loss: 3.7047 - val_accuracy: 0.1005\n","Epoch 44/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.2263 - accuracy: 0.5826 - val_loss: 3.7837 - val_accuracy: 0.1055\n","Epoch 45/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.2065 - accuracy: 0.5896 - val_loss: 3.8046 - val_accuracy: 0.1015\n","Epoch 46/100\n","375/375 [==============================] - 2s 6ms/step - loss: 1.1887 - accuracy: 0.5956 - val_loss: 3.8684 - val_accuracy: 0.1038\n","Epoch 47/100\n","375/375 [==============================] - 2s 6ms/step - loss: 1.1732 - accuracy: 0.6011 - val_loss: 3.9506 - val_accuracy: 0.1052\n","Epoch 48/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.1540 - accuracy: 0.6095 - val_loss: 3.9633 - val_accuracy: 0.1053\n","Epoch 49/100\n","375/375 [==============================] - 2s 6ms/step - loss: 1.1390 - accuracy: 0.6140 - val_loss: 4.0355 - val_accuracy: 0.0995\n","Epoch 50/100\n","375/375 [==============================] - 2s 6ms/step - loss: 1.1185 - accuracy: 0.6229 - val_loss: 4.0953 - val_accuracy: 0.1027\n","Epoch 51/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.1042 - accuracy: 0.6263 - val_loss: 4.1331 - val_accuracy: 0.1023\n","Epoch 52/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.0875 - accuracy: 0.6331 - val_loss: 4.1695 - val_accuracy: 0.1008\n","Epoch 53/100\n","375/375 [==============================] - 2s 6ms/step - loss: 1.0717 - accuracy: 0.6407 - val_loss: 4.2394 - val_accuracy: 0.1042\n","Epoch 54/100\n","375/375 [==============================] - 2s 6ms/step - loss: 1.0563 - accuracy: 0.6444 - val_loss: 4.2840 - val_accuracy: 0.1038\n","Epoch 55/100\n","375/375 [==============================] - 3s 7ms/step - loss: 1.0409 - accuracy: 0.6494 - val_loss: 4.3131 - val_accuracy: 0.1072\n","Epoch 56/100\n","375/375 [==============================] - 2s 5ms/step - loss: 1.0243 - accuracy: 0.6570 - val_loss: 4.3759 - val_accuracy: 0.1030\n","Epoch 57/100\n","375/375 [==============================] - 2s 4ms/step - loss: 1.0093 - accuracy: 0.6631 - val_loss: 4.4471 - val_accuracy: 0.1058\n","Epoch 58/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.9947 - accuracy: 0.6669 - val_loss: 4.4961 - val_accuracy: 0.1045\n","Epoch 59/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.9820 - accuracy: 0.6715 - val_loss: 4.5674 - val_accuracy: 0.1017\n","Epoch 60/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.9688 - accuracy: 0.6749 - val_loss: 4.6293 - val_accuracy: 0.1061\n","Epoch 61/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.9559 - accuracy: 0.6814 - val_loss: 4.6593 - val_accuracy: 0.1069\n","Epoch 62/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.9414 - accuracy: 0.6853 - val_loss: 4.7000 - val_accuracy: 0.1029\n","Epoch 63/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.9286 - accuracy: 0.6900 - val_loss: 4.7693 - val_accuracy: 0.1058\n","Epoch 64/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.9150 - accuracy: 0.6948 - val_loss: 4.8363 - val_accuracy: 0.1034\n","Epoch 65/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.9026 - accuracy: 0.6988 - val_loss: 4.8951 - val_accuracy: 0.1082\n","Epoch 66/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.8912 - accuracy: 0.7032 - val_loss: 4.9441 - val_accuracy: 0.1071\n","Epoch 67/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.8760 - accuracy: 0.7081 - val_loss: 5.0342 - val_accuracy: 0.1022\n","Epoch 68/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.8638 - accuracy: 0.7126 - val_loss: 5.0566 - val_accuracy: 0.1058\n","Epoch 69/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.8506 - accuracy: 0.7170 - val_loss: 5.0987 - val_accuracy: 0.1042\n","Epoch 70/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.8398 - accuracy: 0.7199 - val_loss: 5.1874 - val_accuracy: 0.1046\n","Epoch 71/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.8293 - accuracy: 0.7250 - val_loss: 5.2816 - val_accuracy: 0.1070\n","Epoch 72/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.8175 - accuracy: 0.7301 - val_loss: 5.3290 - val_accuracy: 0.1037\n","Epoch 73/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.8049 - accuracy: 0.7319 - val_loss: 5.3524 - val_accuracy: 0.1092\n","Epoch 74/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.7954 - accuracy: 0.7372 - val_loss: 5.3900 - val_accuracy: 0.1071\n","Epoch 75/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.7824 - accuracy: 0.7431 - val_loss: 5.5046 - val_accuracy: 0.1050\n","Epoch 76/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.7735 - accuracy: 0.7454 - val_loss: 5.5755 - val_accuracy: 0.1045\n","Epoch 77/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.7636 - accuracy: 0.7487 - val_loss: 5.6240 - val_accuracy: 0.1042\n","Epoch 78/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.7545 - accuracy: 0.7514 - val_loss: 5.6360 - val_accuracy: 0.1073\n","Epoch 79/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.7405 - accuracy: 0.7584 - val_loss: 5.7604 - val_accuracy: 0.1053\n","Epoch 80/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.7301 - accuracy: 0.7609 - val_loss: 5.7916 - val_accuracy: 0.1062\n","Epoch 81/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.7231 - accuracy: 0.7620 - val_loss: 5.8391 - val_accuracy: 0.1057\n","Epoch 82/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.7114 - accuracy: 0.7673 - val_loss: 5.9055 - val_accuracy: 0.1050\n","Epoch 83/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.7028 - accuracy: 0.7709 - val_loss: 5.9641 - val_accuracy: 0.1048\n","Epoch 84/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.6932 - accuracy: 0.7730 - val_loss: 6.0589 - val_accuracy: 0.1038\n","Epoch 85/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.6854 - accuracy: 0.7749 - val_loss: 6.1588 - val_accuracy: 0.1037\n","Epoch 86/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.6750 - accuracy: 0.7799 - val_loss: 6.1595 - val_accuracy: 0.1077\n","Epoch 87/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.6664 - accuracy: 0.7817 - val_loss: 6.2791 - val_accuracy: 0.1086\n","Epoch 88/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.6574 - accuracy: 0.7843 - val_loss: 6.3210 - val_accuracy: 0.1037\n","Epoch 89/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.6508 - accuracy: 0.7882 - val_loss: 6.3516 - val_accuracy: 0.1053\n","Epoch 90/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.6409 - accuracy: 0.7922 - val_loss: 6.4190 - val_accuracy: 0.1063\n","Epoch 91/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.6321 - accuracy: 0.7926 - val_loss: 6.4894 - val_accuracy: 0.1041\n","Epoch 92/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.6227 - accuracy: 0.7978 - val_loss: 6.5260 - val_accuracy: 0.1041\n","Epoch 93/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.6156 - accuracy: 0.8005 - val_loss: 6.6087 - val_accuracy: 0.1064\n","Epoch 94/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.6084 - accuracy: 0.8032 - val_loss: 6.6632 - val_accuracy: 0.1088\n","Epoch 95/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.6001 - accuracy: 0.8052 - val_loss: 6.7295 - val_accuracy: 0.1053\n","Epoch 96/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.5901 - accuracy: 0.8106 - val_loss: 6.8312 - val_accuracy: 0.1020\n","Epoch 97/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.5869 - accuracy: 0.8084 - val_loss: 6.8738 - val_accuracy: 0.1048\n","Epoch 98/100\n","375/375 [==============================] - 2s 4ms/step - loss: 0.5767 - accuracy: 0.8142 - val_loss: 6.9699 - val_accuracy: 0.1047\n","Epoch 99/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.5700 - accuracy: 0.8134 - val_loss: 6.9619 - val_accuracy: 0.1046\n","Epoch 100/100\n","375/375 [==============================] - 2s 5ms/step - loss: 0.5611 - accuracy: 0.8177 - val_loss: 7.0560 - val_accuracy: 0.1046\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f12d9c84b90>"]},"metadata":{},"execution_count":7}],"source":["(train_images, train_labels), _ = mnist.load_data()\n","train_images = train_images.reshape((60000, 28 * 28))\n","train_images = train_images.astype(\"float32\") / 255\n","\n","random_train_labels = train_labels[:]\n","np.random.shuffle(random_train_labels)\n","\n","model = keras.Sequential([\n","    layers.Dense(512, activation=\"relu\"),\n","    layers.Dense(10, activation=\"softmax\")\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","model.fit(train_images, random_train_labels,\n","          epochs=100,\n","          batch_size=128,\n","          validation_split=0.2)"]},{"cell_type":"code","source":["#accuracy 는 계속 오르지만 val_accuracy 는 10%"],"metadata":{"id":"G4vp6JkfcisH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Uk6Du43zwvhp"},"source":["#### The manifold hypothesis"]},{"cell_type":"markdown","metadata":{"id":"Hpt7gru5wvhq"},"source":["#### Interpolation as a source of generalization"]},{"cell_type":"markdown","metadata":{"id":"JkaL9ZC-wvhq"},"source":["#### Why deep learning works"]},{"cell_type":"markdown","metadata":{"id":"ZgGiikB6wvhr"},"source":["#### Training data is paramount"]},{"cell_type":"markdown","metadata":{"id":"X0477RQ-wvhr"},"source":["## Evaluating machine-learning models"]},{"cell_type":"markdown","metadata":{"id":"Gn3Q8o7Jwvhr"},"source":["### Training, validation, and test sets"]},{"cell_type":"markdown","metadata":{"id":"tuNn8LXIwvhr"},"source":["#### Simple hold-out validation"]},{"cell_type":"markdown","metadata":{"id":"R0vOzfJIwvhs"},"source":["#### K-fold validation"]},{"cell_type":"markdown","metadata":{"id":"Ah_ykP5cwvhs"},"source":["#### Iterated K-fold validation with shuffling"]},{"cell_type":"markdown","metadata":{"id":"XqC9-022wvhs"},"source":["### Beating a common-sense baseline"]},{"cell_type":"markdown","metadata":{"id":"bVIAa0Enwvht"},"source":["### Things to keep in mind about model evaluation"]},{"cell_type":"markdown","metadata":{"id":"4WZRNBmewvht"},"source":["## Improving model fit"]},{"cell_type":"markdown","metadata":{"id":"Z7rnTr0Gwvhu"},"source":["### Tuning key gradient descent parameters"]},{"cell_type":"markdown","metadata":{"id":"zoUbLJv7wvhu"},"source":["**Training a MNIST model with an incorrectly high learning rate**"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"MIezcImOwvhu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649613711545,"user_tz":-540,"elapsed":21897,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"1190ec81-f03c-4727-abb1-265b53c00049"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","375/375 [==============================] - 2s 5ms/step - loss: 918.1621 - accuracy: 0.4403 - val_loss: 2.2077 - val_accuracy: 0.2578\n","Epoch 2/10\n","375/375 [==============================] - 2s 5ms/step - loss: 2.9394 - accuracy: 0.2583 - val_loss: 4.0475 - val_accuracy: 0.2499\n","Epoch 3/10\n","375/375 [==============================] - 2s 5ms/step - loss: 2.9432 - accuracy: 0.2464 - val_loss: 2.3820 - val_accuracy: 0.2898\n","Epoch 4/10\n","375/375 [==============================] - 2s 4ms/step - loss: 3.0103 - accuracy: 0.2604 - val_loss: 2.0810 - val_accuracy: 0.2700\n","Epoch 5/10\n","375/375 [==============================] - 2s 5ms/step - loss: 2.6765 - accuracy: 0.2868 - val_loss: 24.0317 - val_accuracy: 0.2993\n","Epoch 6/10\n","375/375 [==============================] - 2s 5ms/step - loss: 2.9933 - accuracy: 0.2682 - val_loss: 2.0366 - val_accuracy: 0.2591\n","Epoch 7/10\n","375/375 [==============================] - 2s 4ms/step - loss: 2.7348 - accuracy: 0.2568 - val_loss: 2.9118 - val_accuracy: 0.2599\n","Epoch 8/10\n","375/375 [==============================] - 2s 5ms/step - loss: 2.5995 - accuracy: 0.2498 - val_loss: 2.2299 - val_accuracy: 0.2670\n","Epoch 9/10\n","375/375 [==============================] - 2s 5ms/step - loss: 2.5844 - accuracy: 0.2637 - val_loss: 2.0841 - val_accuracy: 0.2926\n","Epoch 10/10\n","375/375 [==============================] - 2s 4ms/step - loss: 2.5041 - accuracy: 0.2755 - val_loss: 2.1521 - val_accuracy: 0.2971\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f12d024f810>"]},"metadata":{},"execution_count":13}],"source":["(train_images, train_labels), _ = mnist.load_data()\n","train_images = train_images.reshape((60000, 28 * 28))\n","train_images = train_images.astype(\"float32\") / 255\n","\n","model = keras.Sequential([\n","    layers.Dense(512, activation=\"relu\"),\n","    layers.Dense(10, activation=\"softmax\")\n","])\n","model.compile(optimizer=keras.optimizers.RMSprop(1.), # check gradient descend parameters\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","model.fit(train_images, train_labels,\n","          epochs=10,\n","          batch_size=128,\n","          validation_split=0.2)"]},{"cell_type":"markdown","metadata":{"id":"m_CHbLUfwvhu"},"source":["**The same model with a more appropriate learning rate**"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"5Edw8v0Mwvhv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649613756266,"user_tz":-540,"elapsed":18025,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"4cf9f5a9-54cb-4dcd-898a-f97e96398b28"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.4012 - accuracy: 0.9063 - val_loss: 0.1611 - val_accuracy: 0.9567\n","Epoch 2/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.1409 - accuracy: 0.9641 - val_loss: 0.1343 - val_accuracy: 0.9706\n","Epoch 3/10\n","375/375 [==============================] - 2s 4ms/step - loss: 0.1187 - accuracy: 0.9725 - val_loss: 0.1671 - val_accuracy: 0.9670\n","Epoch 4/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0956 - accuracy: 0.9784 - val_loss: 0.2183 - val_accuracy: 0.9664\n","Epoch 5/10\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0896 - accuracy: 0.9816 - val_loss: 0.2061 - val_accuracy: 0.9720\n","Epoch 6/10\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0829 - accuracy: 0.9834 - val_loss: 0.2323 - val_accuracy: 0.9692\n","Epoch 7/10\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0684 - accuracy: 0.9865 - val_loss: 0.2276 - val_accuracy: 0.9747\n","Epoch 8/10\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0627 - accuracy: 0.9882 - val_loss: 0.2584 - val_accuracy: 0.9740\n","Epoch 9/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0622 - accuracy: 0.9886 - val_loss: 0.2217 - val_accuracy: 0.9768\n","Epoch 10/10\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0503 - accuracy: 0.9907 - val_loss: 0.3404 - val_accuracy: 0.9736\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f12d9bf9950>"]},"metadata":{},"execution_count":14}],"source":["model = keras.Sequential([\n","    layers.Dense(512, activation=\"relu\"),\n","    layers.Dense(10, activation=\"softmax\")\n","])\n","model.compile(optimizer=keras.optimizers.RMSprop(1e-2), #appropriate learning rate\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","model.fit(train_images, train_labels,\n","          epochs=10,\n","          batch_size=128,\n","          validation_split=0.2)"]},{"cell_type":"markdown","metadata":{"id":"nXBRiYqawvhv"},"source":["### Leveraging better architecture priors"]},{"cell_type":"markdown","metadata":{"id":"ShmI3QNiwvhv"},"source":["### Increasing model capacity"]},{"cell_type":"markdown","metadata":{"id":"BDZhn70nwvhv"},"source":["**A simple logistic regression on MNIST**"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"5nrGiFYqwvhw","colab":{"base_uri":"https://localhost:8080/","height":431},"executionInfo":{"status":"error","timestamp":1649613679965,"user_tz":-540,"elapsed":270,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"cd1c7456-37a0-4a13-f860-e898c6b12ca8"},"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-0f8d0643a528>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     validation_split=0.2)\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/data_adapter.py\u001b[0m in \u001b[0;36m_check_data_cardinality\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m   1651\u001b[0m                            for i in tf.nest.flatten(single_data)))\n\u001b[1;32m   1652\u001b[0m     \u001b[0mmsg\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"Make sure all arrays contain the same number of samples.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1653\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1654\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1655\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Data cardinality is ambiguous:\n  x sizes: 48000\n  y sizes: 25000\nMake sure all arrays contain the same number of samples."]}],"source":["model = keras.Sequential([layers.Dense(10, activation=\"softmax\")])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","history_small_model = model.fit(\n","    train_images, train_labels,\n","    epochs=20,\n","    batch_size=128,\n","    validation_split=0.2)"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"yZDx8yyLwvhw","colab":{"base_uri":"https://localhost:8080/","height":244},"executionInfo":{"status":"error","timestamp":1649613680405,"user_tz":-540,"elapsed":12,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"89ee4a11-fa58-42a3-c810-1e1b19a09b98"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-04be1a95bfc1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mval_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhistory_small_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"val_loss\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m21\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m plt.plot(epochs, val_loss, \"b--\",\n\u001b[1;32m      5\u001b[0m          label=\"Validation loss\")\n","\u001b[0;31mNameError\u001b[0m: name 'history_small_model' is not defined"]}],"source":["import matplotlib.pyplot as plt\n","val_loss = history_small_model.history[\"val_loss\"]\n","epochs = range(1, 21)\n","plt.plot(epochs, val_loss, \"b--\",\n","         label=\"Validation loss\")\n","plt.title(\"Effect of insufficient model capacity on validation loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend()"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"msBy8QZFwvhw","colab":{"base_uri":"https://localhost:8080/","height":431},"executionInfo":{"status":"error","timestamp":1649613681035,"user_tz":-540,"elapsed":16,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"4a2634b9-9830-40e9-fc06-42bc9f92c3b2"},"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-248c0c92f7b3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     validation_split=0.2)\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/data_adapter.py\u001b[0m in \u001b[0;36m_check_data_cardinality\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m   1651\u001b[0m                            for i in tf.nest.flatten(single_data)))\n\u001b[1;32m   1652\u001b[0m     \u001b[0mmsg\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"Make sure all arrays contain the same number of samples.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1653\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1654\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1655\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Data cardinality is ambiguous:\n  x sizes: 48000\n  y sizes: 25000\nMake sure all arrays contain the same number of samples."]}],"source":["model = keras.Sequential([\n","    layers.Dense(96, activation=\"relu\"),\n","    layers.Dense(96, activation=\"relu\"),\n","    layers.Dense(10, activation=\"softmax\"),\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","history_large_model = model.fit(\n","    train_images, train_labels,\n","    epochs=20,\n","    batch_size=128,\n","    validation_split=0.2)"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","val_loss = history_large_model.history[\"val_loss\"]\n","epochs = range(1, 21)\n","plt.plot(epochs, val_loss, \"b--\",\n","         label=\"Validation loss\")\n","plt.title(\"Effect of large model capacity on validation loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend()"],"metadata":{"id":"hfc8kxWkn2DW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ukggTgr6wvhw"},"source":["## Improving generalization"]},{"cell_type":"markdown","metadata":{"id":"3stmTLUjwvh1"},"source":["### Dataset curation"]},{"cell_type":"markdown","metadata":{"id":"rxm2CnDvwvh2"},"source":["### Feature engineering"]},{"cell_type":"markdown","metadata":{"id":"C0bSulT8wvh2"},"source":["### Using early stopping"]},{"cell_type":"markdown","metadata":{"id":"2Pb85BD9wvh2"},"source":["### Regularizing your model"]},{"cell_type":"markdown","metadata":{"id":"sA-XOwsrwvh3"},"source":["#### Reducing the network's size"]},{"cell_type":"markdown","metadata":{"id":"BhiLLpJEwvh3"},"source":["**Original model**"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"2rfg2v7Hwvh3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649613514887,"user_tz":-540,"elapsed":21188,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"c6f7728a-bcde-4e2d-cdba-5536282f5382"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17465344/17464789 [==============================] - 0s 0us/step\n","17473536/17464789 [==============================] - 0s 0us/step\n","Epoch 1/20\n","30/30 [==============================] - 2s 38ms/step - loss: 0.5529 - accuracy: 0.7833 - val_loss: 0.4285 - val_accuracy: 0.8723\n","Epoch 2/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.3496 - accuracy: 0.8971 - val_loss: 0.3274 - val_accuracy: 0.8897\n","Epoch 3/20\n","30/30 [==============================] - 1s 24ms/step - loss: 0.2554 - accuracy: 0.9218 - val_loss: 0.2883 - val_accuracy: 0.8919\n","Epoch 4/20\n","30/30 [==============================] - 1s 20ms/step - loss: 0.1982 - accuracy: 0.9383 - val_loss: 0.2730 - val_accuracy: 0.8938\n","Epoch 5/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.1630 - accuracy: 0.9474 - val_loss: 0.2738 - val_accuracy: 0.8932\n","Epoch 6/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.1352 - accuracy: 0.9590 - val_loss: 0.2848 - val_accuracy: 0.8879\n","Epoch 7/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.1135 - accuracy: 0.9654 - val_loss: 0.3120 - val_accuracy: 0.8827\n","Epoch 8/20\n","30/30 [==============================] - 1s 20ms/step - loss: 0.0964 - accuracy: 0.9717 - val_loss: 0.3116 - val_accuracy: 0.8864\n","Epoch 9/20\n","30/30 [==============================] - 1s 20ms/step - loss: 0.0798 - accuracy: 0.9786 - val_loss: 0.3372 - val_accuracy: 0.8818\n","Epoch 10/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0668 - accuracy: 0.9837 - val_loss: 0.3570 - val_accuracy: 0.8807\n","Epoch 11/20\n","30/30 [==============================] - 1s 20ms/step - loss: 0.0548 - accuracy: 0.9865 - val_loss: 0.4111 - val_accuracy: 0.8707\n","Epoch 12/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0462 - accuracy: 0.9899 - val_loss: 0.4063 - val_accuracy: 0.8775\n","Epoch 13/20\n","30/30 [==============================] - 1s 20ms/step - loss: 0.0370 - accuracy: 0.9922 - val_loss: 0.4448 - val_accuracy: 0.8739\n","Epoch 14/20\n","30/30 [==============================] - 1s 24ms/step - loss: 0.0299 - accuracy: 0.9948 - val_loss: 0.4622 - val_accuracy: 0.8734\n","Epoch 15/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0229 - accuracy: 0.9963 - val_loss: 0.5093 - val_accuracy: 0.8717\n","Epoch 16/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0197 - accuracy: 0.9967 - val_loss: 0.5319 - val_accuracy: 0.8723\n","Epoch 17/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0123 - accuracy: 0.9986 - val_loss: 0.5877 - val_accuracy: 0.8696\n","Epoch 18/20\n","30/30 [==============================] - 1s 24ms/step - loss: 0.0121 - accuracy: 0.9983 - val_loss: 0.5992 - val_accuracy: 0.8701\n","Epoch 19/20\n","30/30 [==============================] - 1s 20ms/step - loss: 0.0070 - accuracy: 0.9995 - val_loss: 0.6629 - val_accuracy: 0.8664\n","Epoch 20/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0072 - accuracy: 0.9991 - val_loss: 0.6805 - val_accuracy: 0.8672\n"]}],"source":["from tensorflow.keras.datasets import imdb\n","(train_data, train_labels), _ = imdb.load_data(num_words=10000)\n","\n","def vectorize_sequences(sequences, dimension=10000):\n","    results = np.zeros((len(sequences), dimension))\n","    for i, sequence in enumerate(sequences):\n","        results[i, sequence] = 1.\n","    return results\n","train_data = vectorize_sequences(train_data)\n","\n","model = keras.Sequential([\n","    layers.Dense(16, activation=\"relu\"),\n","    layers.Dense(16, activation=\"relu\"),\n","    layers.Dense(1, activation=\"sigmoid\")\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"binary_crossentropy\",\n","              metrics=[\"accuracy\"])\n","history_original = model.fit(train_data, train_labels,\n","                             epochs=20, batch_size=512, validation_split=0.4)"]},{"cell_type":"markdown","metadata":{"id":"4GsX3otrwvh3"},"source":["**Version of the model with lower capacity**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0s40uKTUwvh4"},"outputs":[],"source":["model = keras.Sequential([\n","    layers.Dense(4, activation=\"relu\"),\n","    layers.Dense(4, activation=\"relu\"),\n","    layers.Dense(1, activation=\"sigmoid\")\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"binary_crossentropy\",\n","              metrics=[\"accuracy\"])\n","history_smaller_model = model.fit(\n","    train_data, train_labels,\n","    epochs=20, batch_size=512, validation_split=0.4)"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","val_loss = history_original.history[\"val_loss\"]\n","val_loss2 = history_smaller_model.history[\"val_loss\"]\n","epochs = range(1, 21)\n","plt.plot(epochs, val_loss, \"b--\",\n","         label=\"Validation loss of original model\")\n","plt.plot(epochs, val_loss2, \"b--\",\n","         label=\"Validation loss of smaller model\")\n","plt.title(\"Effect of smaller model capacity on validation loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":244},"id":"fBrAzQvQoQWY","executionInfo":{"status":"error","timestamp":1649613668372,"user_tz":-540,"elapsed":658,"user":{"displayName":"유나현","userId":"01437638864425519006"}},"outputId":"e155f95f-48f5-4c21-b7cd-c0712de1220e"},"execution_count":9,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-4c4034f721d7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mval_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhistory_original\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"val_loss\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mval_loss2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhistory_smaller_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"val_loss\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m21\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m plt.plot(epochs, val_loss, \"b--\",\n","\u001b[0;31mNameError\u001b[0m: name 'history_smaller_model' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"oY13xoFIwvh4"},"source":["**Version of the model with higher capacity**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4fFQcZtGwvh4"},"outputs":[],"source":["model = keras.Sequential([\n","    layers.Dense(512, activation=\"relu\"),\n","    layers.Dense(512, activation=\"relu\"),\n","    layers.Dense(1, activation=\"sigmoid\")\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"binary_crossentropy\",\n","              metrics=[\"accuracy\"])\n","history_larger_model = model.fit(\n","    train_data, train_labels,\n","    epochs=20, batch_size=512, validation_split=0.4)"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","val_loss = history_original.history[\"val_loss\"]\n","val_loss2 = history_larger_model.history[\"val_loss\"]\n","epochs = range(1, 21)\n","plt.plot(epochs, val_loss, \"b--\",\n","         label=\"Validation loss of original model\")\n","plt.plot(epochs, val_loss2, \"b--\",\n","         label=\"Validation loss of larger model\")\n","plt.title(\"Effect of larger model capacity on validation loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend()"],"metadata":{"id":"XKWUD0KTpFcF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1lMgVm8Bwvh4"},"source":["#### Adding weight regularization"]},{"cell_type":"markdown","metadata":{"id":"Wsm4yfmYwvh4"},"source":["**Adding L2 weight regularization to the model**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QbKXl-8kwvh5"},"outputs":[],"source":["from tensorflow.keras import regularizers\n","model = keras.Sequential([\n","    layers.Dense(16,\n","                 kernel_regularizer=regularizers.l2(0.002),\n","                 activation=\"relu\"),\n","    layers.Dense(16,\n","                 kernel_regularizer=regularizers.l2(0.002),\n","                 activation=\"relu\"),\n","    layers.Dense(1, activation=\"sigmoid\")\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"binary_crossentropy\",\n","              metrics=[\"accuracy\"])\n","history_l2_reg = model.fit(\n","    train_data, train_labels,\n","    epochs=20, batch_size=512, validation_split=0.4)"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","val_loss = history_original.history[\"val_loss\"]\n","val_loss2 = history_l2_model.history[\"val_loss\"]\n","epochs = range(1, 21)\n","plt.plot(epochs, val_loss, \"b--\",\n","         label=\"Validation loss of original model\")\n","plt.plot(epochs, val_loss2, \"b--\",\n","         label=\"Validation loss of original model with l2 regularization\")\n","plt.title(\"Effect of l2 regularization on validation loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend()"],"metadata":{"id":"au5_KD2MpoVl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ro_n_4Zawvh5"},"source":["**Different weight regularizers available in Keras**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g4Qiaj3dwvh5"},"outputs":[],"source":["from tensorflow.keras import regularizers\n","regularizers.l1(0.001)\n","regularizers.l1_l2(l1=0.001, l2=0.001)"]},{"cell_type":"markdown","metadata":{"id":"gbnPMDpkwvh5"},"source":["#### Adding dropout"]},{"cell_type":"markdown","metadata":{"id":"O-Lh09UNwvh6"},"source":["**Adding dropout to the IMDB model**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-lqKRRoWwvh7"},"outputs":[],"source":["model = keras.Sequential([\n","    layers.Dense(16, activation=\"relu\"),\n","    layers.Dropout(0.5),\n","    layers.Dense(16, activation=\"relu\"),\n","    layers.Dropout(0.5),\n","    layers.Dense(1, activation=\"sigmoid\")\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"binary_crossentropy\",\n","              metrics=[\"accuracy\"])\n","history_dropout = model.fit(\n","    train_data, train_labels,\n","    epochs=20, batch_size=512, validation_split=0.4)"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","val_loss = history_original.history[\"val_loss\"]\n","val_loss2 = history_dropout.history[\"val_loss\"]\n","epochs = range(1, 21)\n","plt.plot(epochs, val_loss, \"b--\",\n","         label=\"Validation loss of original model\")\n","plt.plot(epochs, val_loss2, \"b--\",\n","         label=\"Validation loss of original model with dropout regularization\")\n","plt.title(\"Effect of dropout regularization on validation loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend()"],"metadata":{"id":"LXJA9E2JqGBx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CTGoIqxPwvh7"},"source":["## Summary"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"chapter05_fundamentals-of-ml.i의 사본","provenance":[{"file_id":"https://github.com/fchollet/deep-learning-with-python-notebooks/blob/master/chapter05_fundamentals-of-ml.ipynb","timestamp":1649297001723}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}